|! Comment !|
db> SELECT CONCAT('Aaron', ' ', 'Well') --    /* anything after -- is comment */
    comment
    FROM comment
    it's comment too.
db> SELECT *
    # a comment line
    FROM tb;
db> SELECT * /*
    coment block
    */ FROM tb;

LIMIT row_count
LIMIT offset, row_count
LIMIT row_cout OFFSET offset
WHERE constraint

|! Select !|

|- Alias -|
db> SELECT 
      id_num AS id, COUNT(*) AS tb_count  /* fld alias */
    FROM 
      table_name tb     /* tb alias */
    WHERE 
      tb.id = 100     /* ==>  table_name.id_num = 100 */
|- IN is faster than multiple ORs -|
db> SELECT * FROM tb
      WHERE
        id IN (100, 101);       /* id = 100 OR id = 101 */
db> SELECT * FROM tb
      WHERE
        id NOT IN (SELECT id FROM tb2);
db> SELECT * FROM tb
      WHERE
        id BETWEEN 5 AND 10;    /* id >=5 AND id <=10 */
|- HAVING -|
/**
 * WHERE before GROUP BY
 * HAVING filter after GROUP BY 
 */
db> SELECT * FROM tb 
      WHERE $constraint1
      GROUP BY xx 
      ORDER BY xx
      HAVING $constraint2     /* filter data after GROUP BY */
    limit $row_count
|- join -|    
db> select * from $tb1 
    join $tb2 on $tb1.$fld1_1 = $tb2.$fld2_1
    left join $tb3 on $tb3.$fld3_1 = $tb1.$fld1_2;
    
|+ group by +|
|- Q: calculate the population of each province -|
    db> select province, count(*) from tb group by province;
`   db> select province, count(*) as nu from tb group by province order by nu desc
`   db> select province, count(*) from tb group by 1 order by 2 desc;
|- Q: a field birth(int) in tb, list the staffs' birthdays in each month-|
    db> select month(birth) as month, count(*) as nu from tb 
        group by month order by nu desc;
`   db> select month(birth), count(*) from tb group by 1 order by 2 desc;

|+ select multiple tables +|
|- group by -|
    db> select tb1.date, tb2.profit,
        min(tb3.price) as min,
        max(tb3.price) - min(tb3.price) + 1 as range,
        from tb1, tb2, tb3 
        where tb1.id = tb2.id and tb2.id = tb3.id
        group by tb1.date, tb2.profit
        order by range desc
    |- join -|
    db> select fld1 from tb1 left join tb2 on (tb1.id = tb2.id)
|+ union and union all +|
|- union : merge the same lines together -|
    db> (select flds from tb where $where) 
         union
         (select flds from tb where $where)
         order by fld desc limit $limit, $offset
|- union all : keep repeated lines -|
    db> (select flds from tb where $where order by $order)
        union
        (select flds from tb where $where)
        limit $limit, $offset
|! !|
/**
 * MySQL doesn't yet support 'LIMIT & IN/ALL/ANY/SOME subquery'
 * e.g. Error:  select flds from tb where id in (select id from tb limit 9);
 */
db> select $flds from $tb where $fld in (select $fld from $tb);
db> select $flds from $tb where id in 
    (select t.id from 
        (select id from tb limit 9) as t
    );
    

|! Insert !|
db> insert [low_priority | delayed | high_priority] [ignore]
    [into] $tb
    [partition $partion_nm]
    +--------------------------------------------------------------------------+
    | ($flds)                          |                                       | 
    | values                           |  set $fld1=$val1, $flds2=$val2...     |
    | ($vals1)[, (vals2)]...           |                                       |
    +--------------------------------------------------------------------------+
    [on duplicate key update ..]
db> insert [low_priority | delayed | high_priority] [ignore]
    [into] $tb
    [partition $partition_nm]
    ($flds)
    select $flds_tb2 from $tb2
    
db> INSERT INTO db1.tb1 (title, time) SELECT * FROM db2.tb2 WHERE 1    

|! Delete !|
db> delete [LOW_PRIORITY] [QUICK] [IGNORE] 
    from $tb[.*] [, tb2[.*]] ...
    [using $tb_ref]
    [where $constraint]
    [order by $fld1,$fld2...]
    [limit $row_count]

db> DELETE t1, t2, FROM t1 INNER JOIN t2 INNER JOIN t3
    WHERE t1.id=t2.id AND t2.id=t3.id;