|! Row-Level Lock(InnoDB/BDB) !|
/**
 * @param $transaction_characteristic
 *  WITH CONSITENT SNAPSHOT
 *  READ WRITE
 *  READ ONLY
 * @discuss if error, please check if the table is MyISAM
 */
db> set autocommit = {0|1} 
db> select @@autocommit;

db> start transaction [$transaction_characteristic];    |   begin;
db> <...; commit;>
db> [...; rollback;]

db> show status like 'innodb_row_lock%';
|[
+-------------------------------+--------+
| Innodb_row_lock_current_waits | 0      | currently waiting for the number of lock
| Innodb_row_lock_time          | 218008 | start from the system to lock the total length of time
| Innodb_row_lock_time_avg      | 27251  | each time the average time spent waiting
| Innodb_row_lock_time_max      | 51031  | from system startup waiting for the longest time spent up to now
| Innodb_row_lock_waits         | 8      | start from the system to the total number of waiting
+-------------------------------+--------+
]|

|- E.g. -|
|! Diffirence between `start transaction` and `set autocommit=0` !|
|+ SET AUTOCOMMIT=0 +|
db> SELECT @@autocommit;
+------------------+
| @@autocommit = 1 |
+------------------+

db> SET AUTOCOMMIT=0;
db> SELECT @@autocommit;
+------------------+
| @@autocommit = 0 |
+------------------+

db> INSERT INTO empty_tb1 SET val=1;
db> SELECT * FROM empty_tb1;
|[
  val  1
]|
|- Rollback AUTOCOMMIT=0 -|
db> INSERT INTO empty_tb2 SET val=1;
db> ROLLBACK;
db> SELECT * FROM empty_tb2;
|[
]|
db> COMMIT;
db> SELECT @@autocommit;
+------------------+
| @@autocommit = 0 |
+------------------+

|+ START TRANSACTION +|
db> SELECT @@autocommit;
+------------------+
| @@autocommit = 1 |
+------------------+
db> START TRANSACTION;
db> SELECT @@autocommit;
+------------------+
| @@autocommit = 1 |
+------------------+
db> INSERT INTO empty_tb1 SET val=1;
db> SELECT * FROM empty_tb1;
|[
  val  1
]|
|- Rollback transaction -|
db> INSERT INTO empty_tb2 SET val=1;
db> ROLLBACK;
db> SELECT * FROM empty_tb2;
|[
]|
db> COMMIT;
db> SELECT @@autocommit;
+------------------+
| @@autocommit = 1 |
+------------------+


db> SHOW TABLE STATUS LIKE 't1' \g;     /* check if InnoDB */


Sess1 db> START TRANSACTION;
Sess1 db> INSERT INTO t1 SET val="Aaron";                 /* pending */
Sess1 db> UPDATE t1 SET val="AaronScript" WHERE val="Aaron";  /* pending */

Sess2 db> BEGIN;
Sess2 db> INSERT INTO t1 SET val="Well";                /* blocking */

Sess1 db> COMMIT;
Sess1 db>   /* do pended transactions */

Sess2 db>   /* release block, do insert transaction */

Sess1 db> INSERT INTO t1 SET val="arbor";   /* 2nd pending commit if necessary*/

Sess2 db> UPDATE t1 SET val="WellDone" WHERE val="Well";    /* blocking */

Sess1 db> COMMIT;
Sess1 db>    /* do 2nd pended transactions */

Sess2 db> /* release block, do update transaction */

Sess1 db> SELECT COUNT(t1) FROM t1; /* if pended transaction failed */
Sess1 db> ROLLBACK;

Sess2 db> COMMIT;
Sess2 db> ...
Sess2 db> ROLLBACK;



|- E.g. DeadLocks -|
Sess1 db> SET AUTOCOMMIT=0;
Sess1 db> BEGIN;
Sess1 db> UPDATE t1 SET id=100 WHERE id=1;

Sess2 db> SET AUTOCOMMIT=0;
Sess2 db> START TRANSACTION;
Sess2 db> UPDATE t1 SET id=200 WHERE id=2;   /* blocking */

Sess1 db> UPDATE t1 SET id=102 WHERE id=2;

Sess2 db>
|[
ERROR 1213 (40001): Deadlock found when trying to get lock;
]|

|! Table-Level Lock(MyISAM) !|
/**
 * @param $lock_type
 *  READ [LOCAL]                         select
 *   prohibit write in this table
 *   prohibit read/write in other tables, 
 *   blocks write in other sessions
 *  [LOW_PRIORITY] WRITE                 insert/update
 *   prohibit read/write in other tables
 *   blocks read/write in other sessions
 */
db> lock tables 
    $tb [as $alias] $lock_type
    $tb2 [as $alias] $lock_type
    ...
    
db> unlock tables;


db> show status like 'table%';
|[
+--------------------+-----+
| Tb_locks_immediate | 296 | a number of table-level locking
| Tb_locks_waited    | 0   | the emergence of table-level lock contention occurs the number of waiting
+--------------------+-----+
]|

|+ Table Level Lock  +|
Current read-lock queue (lock->read)
Pending read-lock queue (lock->read_wait)
Current write-lock queue (lock->write)
Pending write-lock queue (lock->write_wait)

|- E.g. Read Lock -|
Sess1 db> LOCK TABLES t1 READ;
Sess1 db> SELECT COUNT(*) FROM t1;   /* it works */
Sess1 db> INSERT INTO t1 SET val="AaronScript"; /* Error: */
|[
ERROR 1099 (HY000): Table 't1' was locked with a READ lock and can't be updated
]|
Sess1 db> SELECT COUNT(*) FROM t2;   /* Error: */
|[
ERROR 1100 (HY000): Table 't2' was not locked with LOCK TABLES
]|

Sess2 db> SELECT COUNT(*) FROM t1; /* OK */
Sess2 db> SELECT COUNT(*) FROM t2; /* OK */
Sess2 db> INSERT INTO t1 SET val="AaronScript"; /* pending, nothing insert until t1 unlocked */

Sess1 db> UNLOCK TABLES;  /* queue runs, release blocks */

Sess2 db>       /* block released, write success */
    
|- E.g. Write Lock -|
Sess1 db> LOCK TABLES t1 WRITE;
Sess1 db> SELECT * FROM t1; /* works */
Sess1 db> SELECT COUNT(*) FROM t2; /* Error: */

Sess2 db> SELECT * FROM t1;                     /* pending */
Sess3 db> SELECT * FROM t2;                     /* pending */
Sess4 db> INSERT INTO t1 SET val="Aaron";    /* pending */

Sess1 db> UNLOCK TABLES;
|+ Page-Level Lock +|