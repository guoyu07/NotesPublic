sh$ gdb --help
|[
 gdb [options] [executable-file [core-file or process-id]]
    gdb [options] --args executable-file [inferior-arguments ...]
    gdb [options] [--python|-P] script-file [script-arguments ...]

Options:
  --args             Arguments after executable-file are passed to inferior
  -b BAUDRATE        Set serial port baud rate used for remote debugging.
  --batch            Exit after processing options.
  --batch-silent     As for --batch, but suppress all gdb stdout output.
  --return-child-result
                     GDB exit code will be the child's exit code.
  --cd=DIR           Change current directory to DIR.
  --command=FILE, -x Execute GDB commands from FILE.
  --eval-command=COMMAND, -ex
                     Execute a single GDB command.
                     May be used multiple times and in conjunction
                     with --command.
  --init-command=FILE, -ix Like -x but execute it before loading inferior.
  --init-eval-command=COMMAND, -iex Like -ex but before loading inferior.
  --core=COREFILE    Analyze the core dump COREFILE.
  --pid=PID          Attach to running process PID.
  --dbx              DBX compatibility mode.
  --directory=DIR    Search for source files in DIR.
  --exec=EXECFILE    Use EXECFILE as the executable.
  --fullname         Output information used by emacs-GDB interface.
  --help             Print this message.
  --interpreter=INTERP
                     Select a specific interpreter / user interface
  -l TIMEOUT         Set timeout in seconds for remote debugging.
  --nw               Do not use a window interface.
  --nx               Do not read any .gdbinit files.
  --nh               Do not read .gdbinit file from home directory.
  --python, -P       Following argument is Python script file; remaining
                     arguments are passed to script.
  --quiet            Do not print version number on startup.
  --readnow          Fully read symbol files on first access.
  --readnever        Do not read symbol files.
  --se=FILE          Use FILE as symbol file and executable file.
  --symbols=SYMFILE  Read symbols from SYMFILE.
  --tty=TTY          Use TTY for input/output by the program being debugged.
  --tui              Use a terminal user interface.
  --version          Print version information and then exit.
  -w                 Use a window interface.
  --write            Set writing into executable and core files.
  --xdb              XDB compatibility mode.
]|


|[gdb.c
#include <stdio.h>
int metaphor = 0;
void analogy(int emir, char *eminence){
    printf(" #<# analogy(emir=%d, eminence=%s) #># ", emir, eminence);
    metaphor++;
}
int main(int argc, char **argv){
    printf(" args: %s, %s, %s ", *(argv), *(argv+1), *(argv+2));
    int emigre = atoi(*(++argv));
    emigre++;
    emigre--;
    metaphor += emigre;
    metaphor -= argc;
    printf(" *<* metaphor=%d *>* ", metaphor);
    analogy(emigre, *(++argv));
    printf(" $<$ metaphor=%d $>$ ", metaphor);
    return 0;
}
]|
sh$ gcc gdb.c -o gdb.out -g
/**
 * gdb --help
 *  gdb --args gdb.out 100 Aaron
 */
sh$ gdb
(gdb) help all
|[
file $file
r
c  -- continuing
b $file:$line
b $file:$fn
b $line
b $fn
b *$addr
d $breakpoint_number
s -- Step Into, need gcc -g
n -- Step Over, need gcc -g
si -- 
ni -- Step one instruction
p $var -- Print the value of variable
display /i $pc  -- /i indicate hexadecimal;  $pc compiled command
undisplay $display_num-- Remove the display setting above
i 
rc -- Continue program being debugged but run it in reverse
rni -- Step backward one instruction
rsi -- Step backward exactly one instruction
si -- Step one instruction exactly
stepping -- Specify single-stepping behavior at a tracepoint
tp -- Set a tracepoint at specified line or function
tty -- Set terminal for future runs of program being debugged
where -- Print backtrace of all stack frames
ws -- Specify single-stepping behavior at a tracepoint
awatch -- Set a watchpoint for an expression
break -- Set breakpoint at specified line or function
break-range -- Set a breakpoint for an address range
catch -- Set catchpoints to catch events
catch assert -- Catch failed Ada assertions
catch catch -- Catch an exception
catch exception -- Catch Ada exceptions
...
]|
(gdb) file gdb.out                    /* Reading symbols from gdb.out */
(gdb) set args 100 Aaron                      /* Set arguments */ 

(gdb) r                               /* run */
|[
args: /home/lef/tmp/gdb.out, 100, Aaron 
*<* metaphor=97 *>*  
#<# analogy(emir=100, eminence=Aaron) #>#
*<* metaphor=98 *>* 
]|
(gdb) b main          /* b $fn : break at main() */
|[
Breakpoint 1 at 0x4005c7: file gdb.c, line 8.
]|
/**
 * @note
 *  gcc gdb.c -g -o gdb.out    -g is necessary
 */
(gdb) r               /* re-run from breakpoint */
|[
Breakpoint 1, main (argc=3, argv=0x7fffffffe588) at gdb.c:8
8         printf(" args: %s, %s, %s ", *(argv), *(argv+1), *(argv+2));
]|
(gdb) s              /* run a line C code step by step */
|[
9 int emigre = atoi(*(++argv));
]|
(gdb) p emigre        /*p $var : print the value of this variable before this step */
|[
$1 = 0 
]|
(gdb) s             
|[
10  emigre++;
]|
(gdb) p emigre         
|[
$2 = 100
]|
(gdb) b 14          /* b int $line : break at line 16 */
(gdb) b analogy         /* break at analogy() */
(gdb) c             /* continuing */
|[
Breakpoint 2, main() at gdb.c:14
14    printf(" *<* metaphor=%d *>* ", metaphor);
]|
(gdb) c
|[
Breakpoint 3, analogy (emir=100, eminence=0x7fffffffe7f5 "Aaron") at gdb.c:4
4     printf(" #<# analogy(emir=%d, eminence=%s) #># ", emir, eminence);
]|
(gdb) p emir
|[
$3 = 100
]|
(gdb) c
|[
args: /home/lef/tmp/gdb.out, 100, Aaron  *<* metaphor=97 *>*  #<# analogy(emir=100, eminence=Aaron) #>#  $<$ metaphor=98 $>$
]|

/**
 * display
 *  /i  display compiled code
 */
(gdb) display /i $pc      /* display with compiled code */
(gdb) r                   /* re-run */
|[
Breakpoint 1, main (argc=3, argv=0x7fffffffe588) at gdb.c:8
8         printf(" args: %s, %s, %s ", *(argv), *(argv+1), *(argv+2));
1: x/i $pc => 0x4005c7 <main+15>:  mov    -0x20(%rbp),%rax
]|
(gdb) s             /* run a line C code step by step */
|[
9         int emigre = atoi(*(++argv));
1: x/i $pc => 0x4005f6 <main+62>:  addq   $0x8,-0x20(%rbp)
]|
(gdb) si          /* run a line compiled code step by step */
|[
11        emigre--;
1: x/i $pc => 0x400616 <main+94>:  subl   $0x1,-0x4(%rbp)
]|
(gdb) si
|[
12        metaphor += emigre;
1: x/i $pc => 0x40061a <main+98>: mov 0x200a20(%rip),%edx  # 0x601040 <metaphor>
]|

(gdb) d       /* delete all breakpoints */
(gdb) b *main   /* breakpoint at main() of prolog */
|[
Breakpoint 4, main () at gdb.c:7
]|
(gdb) r
|[
7               int main(int argc, char **argv){
1: x/i $pc => 0x4005b8 <main>:     push   %rbp
]|
(gdb) si
|[
0x0000000000400560      7               int main(int argc, char **argv){
1: x/i $pc
=> 0x4005b9 <main+1>:   mov    %rsp,%rbp
]|
(gdb) si
|[
0x0000000000400563      7               int main(int argc, char **argv){
1: x/i $pc
=> 0x400563 <main+4>:   sub    $0x10,%rsp
]|

(gdb) i r           /* information register*/
|[
rax            0x4005b8 4195768
rbx            0x0      0
rcx            0x400690 4195984
rdx            0x7fffffffe5a8   140737488348584
rsi            0x7fffffffe588   140737488348552
rdi            0x3      3
rbp            0x7fffffffe4a0   0x7fffffffe4a0
rsp            0x7fffffffe4a0   0x7fffffffe4a0
r8             0x7ffff7dd5e80   140737351868032
r9             0x0      0
r10            0x7fffffffe2f0   140737488347888
r11            0x7ffff7a3ba20   140737348090400
r12            0x400490 4195472
r13            0x7fffffffe580   140737488348544
r14            0x0      0
r15            0x0      0
rip            0x4005bc 0x4005bc <main+4>
eflags         0x246    [ PF ZF IF ]
cs             0x33     51
ss             0x2b     43
ds             0x0      0
es             0x0      0
fs             0x0      0
gs             0x0      0
]|
(gdb) i r rax
|[
rax            0x4005b8 4195768
]|





















