// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class CADisplayLink;
@class NSData;
@class CALayer;
@class UIImage;
@class NSCoder;


/// A subclass of UIImageView that can be animated using an image name string or raw data.
SWIFT_CLASS("_TtC4Gifu19AnimatableImageView")
@interface AnimatableImageView : UIImageView

/// A display link that keeps calling the updateFrame method on every screen refresh.
@property (nonatomic, strong) CADisplayLink * __nonnull displayLink;

/// The size of the frame cache.
@property (nonatomic) NSInteger framePreloadCount;

/// A computed property that returns whether the image view is animating.
@property (nonatomic, readonly) BOOL isAnimatingGIF;

/// Prepares the frames using a GIF image file name, without starting the animation. The file name should include the .gif extension.
///
/// \param imageName The name of the GIF file. The method looks for the file in the app bundle.
- (void)prepareForAnimationWithImageNamed:(NSString * __nonnull)imageName;

/// Prepares the frames using raw GIF image data, without starting the animation.
///
/// \param data GIF image data.
- (void)prepareForAnimationWithImageData:(NSData * __nonnull)data;

/// Prepares the frames using a GIF image file name and starts animating the image view.
///
/// \param imageName The name of the GIF file. The method looks for the file in the app bundle.
- (void)animateWithImageWithNamed:(NSString * __nonnull)imageName;

/// Prepares the frames using raw GIF image data and starts animating the image view.
///
/// \param data GIF image data.
- (void)animateWithImageData:(NSData * __nonnull)data;

/// Updates the image property of the image view if necessary. This method should not be called manually.
- (void)displayLayer:(CALayer * __nonnull)layer;

/// Starts the image view animation.
- (void)startAnimatingGIF;

/// Stops the image view animation.
- (void)stopAnimatingGIF;

/// Reset the image view values
- (void)prepareForReuse;

/// Update the current frame with the displayLink duration
- (void)updateFrame;

/// Attaches the display link.
- (void)attachDisplayLink;
- (nonnull instancetype)initWithImage:(UIImage * __nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * __nullable)image highlightedImage:(UIImage * __nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIImage (SWIFT_EXTENSION(Gifu))

/// Resizes an image instance.
///
/// \param size The new size of the image.
///
/// \returns  A new resized image instance.
- (UIImage * __nonnull)resize:(CGSize)size;

/// Resizes an image instance to fit inside a constraining size while keeping the aspect ratio.
///
/// \param size The constraining size of the image.
///
/// \returns  A new resized image instance.
- (UIImage * __nonnull)resizeAspectFit:(CGSize)size;

/// Resizes an image instance to fill a constraining size while keeping the aspect ratio.
///
/// \param size The constraining size of the image.
///
/// \returns  A new resized image instance.
- (UIImage * __nonnull)resizeAspectFill:(CGSize)size;

/// Returns a new UIImage instance using raw image data and a size.
///
/// \param data Raw image data.
///
/// \param size The size to be used to resize the new image instance.
///
/// \returns  A new image instance from the passed in data.
+ (UIImage * __nullable)imageWithData:(NSData * __nonnull)data size:(CGSize)size;
@end

#pragma clang diagnostic pop
