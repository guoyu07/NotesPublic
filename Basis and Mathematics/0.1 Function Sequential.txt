|! for-loop !|
/**
 * s1, usually an assignment statement, is executed. 
 * s2, usually a comparison, is evaluated. 
 *  If false, the for-loop terminates. 
 *  If true, s3-statement is executed. 
 * s4, usually an assignment statement, is executed, and control returns to
 * evaluate e2 again.
 */
for(s1-assignment; bool s2-comparison; s4)
  if(s2) s3-statement;
if(!s2) for-loop terminates
|! while: break/continue !|
x=0;
while (x++ < 4){
  if(x == 2)
    break;
  printf("%d", x);
}
output: 1

y=0;
while (y++ < 4){
  if(y == 2)
    continue;               /* back to while */
  printf("%d", y);
}
output: 1, 3, 4