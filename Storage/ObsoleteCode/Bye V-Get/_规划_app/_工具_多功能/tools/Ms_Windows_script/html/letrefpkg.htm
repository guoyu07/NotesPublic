<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>引用同一个程序包中的其他脚本部件</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Windows&nbsp;脚本部件</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="letrefpkg"></A>引用同一个程序包中的其他脚本部件</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>可以创建一个包含多个 Windows&reg; 脚本部件的程序包，这样不必注册第二个脚本部件就可以实例化并使用其余的脚本部件。</P>

<P>例如，可以创建一个实现 <B>Automation</B> 接口的脚本部件，并说明了一系列属性和方法。同一个程序包中的第二个脚本部件可能实现了 ASP 接口，该接口提供了访问 Microsoft&reg; Internet Information Services (IIS) 的服务器对象模型的途径。然后可以在 Automation 脚本部件中创建一个方法或属性来说明该 ASP 脚本部件并使其成员成为可用的。</P>

<P>要引用来自别的实现的脚本部件，请在一个说明第二个脚本部件的方法中创建一个框架成员 &#0151; 属性或方法。</P>

<P><B>要引用同一个脚本部件文件中的别的脚本部件 </B>

<OL type="1">
	<LI>在第一个脚本部件中声明一个属性或方法。</li>

	<LI>作为新属性或方法定义的一部分，调用 <A HREF="letfctcreates.htm">createComponent</A> 函数。
<P>例如，下面的代码演示了同一个程序包中的两个脚本部件。在第一个脚本部件中， math 方法简单地引用了第二个脚本部件，后者说明了 <B>add</B> 方法和 <B>multiply</B> 方法。
</li>
</OL>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意</b>&nbsp;&nbsp;&nbsp;CDATA 项是必需的，用来使 &lt;script&gt; 元素中的脚本成为不透明的。详细信息请参阅<A HREF="letxml.htm">脚本部件文件和 XML 一致性</A>。</BLOCKQUOTE>

<PRE class="code">&lt;?XML version="1.0"?&gt;
&lt;package&gt;
&lt;component id="component1"&gt;
&lt;registration progid="Component.FrontEnd"/&gt;
&lt;public&gt;
&nbsp;&nbsp;&nbsp;&lt;property name="math"/&gt;
&lt;/public&gt;
&lt;script language="JScript"&gt;
&lt;![CDATA[
var math = createComponent("component2")
&nbsp;&nbsp;&nbsp;]]&gt;
&lt;/script&gt;
&lt;/component&gt;

&lt;component id="component2"&gt;
&lt;registration progid="Component.Math"/&gt;
&lt;public&gt;
&nbsp;&nbsp;&nbsp;&lt;method name="add"/&gt;
&nbsp;&nbsp;&nbsp;&lt;method name="multiply"/&gt;
&lt;/public&gt;
&lt;script language="JScript"&gt;
&lt;![CDATA[
function add(n1, n2){
&nbsp;&nbsp;&nbsp;return n1+n2;
}
function multiply(n1, n2){
&nbsp;&nbsp;&nbsp;return n1*n2;
}
]]&gt;
&lt;/script&gt;
&lt;/component&gt;
&lt;/package&gt;</PRE>

<P>要调用所引用的脚本部件，请调用完整的成员层次来获得它的方法或属性。下面的示例演示了实现这种功能的若干方式：</P>

<PRE class="code">' 创建第一个脚本部件的实例。
set o1 = CreateObject("Component.FrontEnd")
' 直接调用第二个脚本部件的函数。
msgbox(o1.math.add(3,5))
msgbox(o1.math.multiply(3,5))
' 直接引用 math 方法创建第二个对象。
Set o2 = o1.math()
msgbox(o2.add(4,5))
msgbox(o2.multiply(4,5))</PRE>

<P>每次调用 <B>createComponent()</B> 函数时，都将创建所引用的脚本部件的一个新实例。如果需要在两次调用期间保留实例信息，请用一个全局变量来存储第二个脚本部件的指针，如下面的示例所示。</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>CDATA 项是必需的，用来使 &lt;script&gt; 元素中的脚本成为不透明的。详细信息请参阅<A HREF="letxml.htm">脚本部件文件和 XML 一致性</A>。</BLOCKQUOTE>

<PRE class="code">&lt;component id="component1"&gt;
&lt;registration progid="Component.FrontEnd"/&gt;
&lt;public&gt;
&nbsp;&nbsp;&nbsp;&lt;property name="math"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;get/&gt;
&nbsp;&nbsp;&nbsp;&lt;/property&gt;
&lt;/public&gt;
&lt;script language="JScript"&gt;
&lt;![CDATA[
var m = createComponent("component2")
function get_math(){
&nbsp;&nbsp;&nbsp;return m
}
&nbsp;&nbsp;&nbsp;]]&gt;
&lt;/script&gt;
&lt;/component&gt;

(Component2 见前一个示例)</PRE>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="letfilecont.htm">脚本部件文件的内容</A> | <A HREF="letelepackage.htm">&lt;package&gt;</A> | <A HREF="letelescriptlet.htm">&lt;component&gt;</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
