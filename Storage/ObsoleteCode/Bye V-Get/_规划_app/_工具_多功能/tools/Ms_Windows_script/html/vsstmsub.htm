<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Sub 语句</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Visual&nbsp;Basic&nbsp;Scripting&nbsp;Edition</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vsstmsub"></A>Sub 语句</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>声明 <B>Sub</B> 过程的名称、参数以及构成其主体的代码。</P>

<PRE class="syntax">[<B>Public</B> [<B>Default</B>] | <B>Private</B>] <B>Sub</B> <I>name</I> [<B>(</B><I>arglist</I><B>)</B>] 
&nbsp;&nbsp;&nbsp;[<I>statements</I>]
&nbsp;&nbsp;&nbsp;[<B>Exit Sub</B>]
&nbsp;&nbsp;&nbsp;[<I>statements</I>]
<B>End Sub</B></PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>Public</I></DT>

<DD>表示 <B>Sub</B> 过程可被所有脚本中的所有其他过程访问。</dd>

<DT><I>Default</I></DT>

<DD>只与 <B>类</B>块中的<B>Public</B> 关键字连用，用来表示 <B>Sub</B> 过程是类的默认方法。如果在类中指定了不止一个<B>Default</B>过程，就会出错。</dd>

<DT><I>Private</I></DT>

<DD>表示 <B>Sub</B> 过程只可被声明该过程的脚本中的其他过程访问。</dd>

<DT><I>name</I></DT>

<DD><B>Sub</B> 的名称，遵循标准变量命名规则。</dd>

<DT><I>arglist</I></DT>

<DD>代表在调用时要传递给 <B>Sub</B> 过程的参数的变量列表。用逗号隔开多个变量。</dd>

<DT><I>statements</I></DT>

<DD>在 <B>Sub</B> 过程主体内所执行的任何语句组。</dd>
</DL>

<P><B>arglist</B> 参数包含下列语法和部分：</P>

<PRE class="syntax">[ByVal | ByRef] varname[( )]</PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>ByVal</I></DT>

<DD>表示该参数是按值传递的。</dd>

<DT><I>ByRef</I></DT>

<DD>表示该参数按引用传递。</dd>

<DT><I>varname</I></DT>

<DD>代表参数的变量名称，遵循标准变量命名规则。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>如没有显式地指定使用 Public 或 Private，则 <B>Sub</B> 过程默认为公用，即它们对于脚本中的所有其他过程都是可见的。<B>Sub</B> 过程中局部变量的值在调用过程中不被保留。</P>

<P>不能在任何其他过程（例如，<B>Function</B> 或 <B>Property Get</B>）中定义 <B>Sub</B> 过程。</P>

<P>使用 <B>Exit Sub </B>语句可以立即从 <B>Sub</B> 过程中退出。程序继续执行调用 <B>Sub</B> 过程的语句之后的语句。可以在 <B>Sub</B> 过程中任意位置出现任意个 <B>Exit Sub</B> 语句。</P>

<P>与 <B>Function</B> 过程相似之处是：<B>Sub</B> 过程是一个可以获取参数，执行一系列语句以及可改变其参数的值的独立过程。而与 <B>Function</B> 过程不同之处是：Function 过程可以返回值，而 <B>Sub</B> 过程不能用于表达式中。</P>

<P>可以使用过程名并跟随相应的参数列表来调用 <B>Sub</B> 过程。关于如何调用 <B>Sub</B> 过程的详细说明信息，请参阅 <B>Call</B> 语句。</P>

<BLOCKQUOTE class="dtBlock">
<B><b class="le">警告</b>&nbsp;&nbsp;&nbsp;Sub</B> 过程可以是递归的，即该过程可以调用自己来完成某个给定的任务。但是递归可能会导致堆栈溢出。</BLOCKQUOTE>

<P>在 <B>Sub</B> 过程中使用的变量分为两类：一类是在过程内显式声明的，另一类则不是。在过程内显式声明的变量（使用 <B>Dim</B> 或等效方法）总是局部变量。对于那些没有在过程中显式声明的变量也是局部的，除非在该过程外更高级别的位置显式地声明它们。</P>

<BLOCKQUOTE class="dtBlock">
<B><b class="le">警告</b>&nbsp;&nbsp;&nbsp;</B>过程可以使用没有在过程内显式声明的变量，但只要有任何 script 级定义的名称与之同名，就会产生名称冲突。如果过程中引用的未声明的变量与其他的过程、常数或变量的名称相同，则会认为过程引用的是脚本级的名称。要避免这类冲突，请使用 <B>Option Explicit</B> 语句可强制显式声明变量。</BLOCKQUOTE>

<H4 class="dtH4">要求</H4>

<P><A HREF="vtoriversioninformation.htm">版本 1</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="vsstmcall.htm">Call 语句</A> | <A HREF="vsstmdim.htm">Dim 语句</A> | <A HREF="vsstmexit.htm">Exit 语句</A> | <A HREF="vsstmfunction.htm">Function 语句</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
