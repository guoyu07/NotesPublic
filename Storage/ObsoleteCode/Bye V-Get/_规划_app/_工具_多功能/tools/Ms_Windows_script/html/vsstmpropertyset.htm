<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Property Set 语句</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Visual&nbsp;Basic&nbsp;Scripting&nbsp;Edition</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vsstmpropertyset"></A>Property Set 语句</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>在 <B>Class</B> 块中，声明名称、参数和代码，这些构成了将引用设置到对象的 <B>Property</B> 过程的主体。</P>

<PRE class="syntax"> [<B>Public</B> | <B>Private</B>] <B>Property Set</B> name<B>(</B>
<B>   </B>[<I>arglist</I>,] <I>reference</I>
<B>)</B>
&nbsp;&nbsp;&nbsp;&nbsp;[statement]
&nbsp;&nbsp;&nbsp;&nbsp;[<B>Exit Property</B>] 
&nbsp;&nbsp;&nbsp;&nbsp;[statement]
<B>End Property</B> </PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>Public</I></DT>

<DD>表明 <B>Property Set</B> 过程可以被所有脚本中的其他所有过程访问。</dd>

<DT><I>Private</I></DT>

<DD>表明 <B>Property Set</B> 过程只能被声明之的同一 <B>Class</B> 块中的其他过程访问。</dd>

<DT><I>name</I></DT>

<DD><B>Property Set</B> 过程的名称；遵守标准的变量命名规则，不过该名称可以与同一个 <B>Class</B> 块中的 <B>Property Get</B> 或 <B>Property Let</B> 过程相同。</dd>

<DT><I>arglist</I></DT>

<DD>变量列表，代表在 <B>Property Set</B> 过程被调用时传递给它的参数。多个参数之间用逗号分隔开。此外，<B>Property Set</B> 过程将总是比它相应的 <B>Property Get</B> 过程多一个参数。这个多出来的参数是被赋予属性的对象。</dd>

<DT><I>reference</I></DT>

<DD>变量，其中包含被用于对象引用赋值的右侧的对象引用。</dd>

<DT><I>statement</I></DT>

<DD>将要在 <B>Property Set</B> 过程主体中执行的任何一组语句。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>除非使用 Public 或 Private 明确地进行指定，否则 <B>Property Set</B> 过程被设置为缺省的公有模式，即脚本中的其他所有过程都是可见的。在不同的过程调用时，<B>Property Set</B> 过程中的局部变量是不保存的。</P>

<P>在其他任何过程（例如Function或Property Let）中都不能够定义Property Set过程。</P>

<P>Exit Property 语句将导致立即从 Property Set 过程中退出。程序将继续执行调用 Property Set 过程之后的语句。Exit Property 语句的数量不受限制，可以出现在 Property Set 过程中的任何位置。</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>每个 <B>Property Set</B> 语句都必须为所定义的过程至少定义一个参数。当 <B>Property Set</B> 语句所定义的过程被调用时，该参数（在多个参数时为最后一个参数）将为属性提供实际的对象引用。在前面的语法中，该参数称为引用。</BLOCKQUOTE>

<P>与 <B>Function</B> 和 <B>Property Get</B> 过程类似，<B>Property Set</B> 过程是一个单独的过程，它可以有若干参数，执行一系列的语句，还可以改变参数的值。然而，与 <B>Function</B> 和 <B>Property Get</B> 过程不同的是，函数和过程都可以返回值，而 <B>Property Set</B> 过程对象引用赋值（<B>Set</B> 语句）的左侧。</P>

<H4 class="dtH4">要求</H4>

<P><A HREF="vtoriversioninformation.htm">版本 5</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="vsstmclass.htm">Class 语句</A> | <A HREF="vsstmdim.htm">Dim 语句</A> | <A HREF="vsstmexit.htm">Exit 语句</A> | <A HREF="vsstmfunction.htm">Function 语句</A> | <A HREF="vsstmprivate.htm">Private 语句</A> | <A HREF="vsstmpropertyget.htm">Property Get 语句</A> | <A HREF="vsstmpropertylet.htm">Property Let 语句</A> | <A HREF="vsstmpublic.htm">Public 语句</A> | <A HREF="vsstmset.htm">Set 语句</A> | <A HREF="vsstmsub.htm">Sub 语句</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
