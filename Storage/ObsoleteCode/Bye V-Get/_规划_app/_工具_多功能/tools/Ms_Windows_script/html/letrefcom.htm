<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>引用其他部件</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Windows&nbsp;脚本部件</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="letrefcom"></A>引用其他部件</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>Windows&reg; 脚本部件可以包括为创建该脚本部件所需的外部部件的引用，这些部件可以是： 

<UL type="disc">
	<LI>附加的 COM 对象</li>

	<LI>类型库</li>

	<LI>资源，诸如不想硬编码到脚本部件的脚本中的数字和文本。</li>
</UL>

<H2 class="dtH2">引用附加 COM 部件</H2>

<P>在脚本部件中，可能需要创建其他必要的 COM 部件的实例。有两种方式来实现这一点： 

<UL type="disc">
	<LI><B>用脚本&nbsp;&nbsp;&nbsp;</B>可以直接在脚本中创建其他对象的实例。例如，可以使用 Microsoft&reg; Visual Basic&reg; Scripting Edition (VBScript) 的 <B>CreateObject</B> 函数或 JScript 中新的 <B>ActiveXObject</B> 对象。</li>

	<LI><B>使用 OBJECT 元素&nbsp;&nbsp;&nbsp;</B>使用 &lt;object&gt; 元素和在 HTML 页面中使用 &lt;OBJECT&gt; 标记相似。使用 &lt;object&gt; 元素将使对象在全局范围内对任何脚本都可用，并允许脚本工具提供语句完善。它还提供了一个方便途径来总结和记录在脚本部件中所使用的对象。
<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>尽管脚本部件中的 &lt;object&gt; 元素与 HTML 页面中的 &lt;OBJECT&gt; 标记相似，但脚本部件中的 &lt;object&gt; 元素的属性列表要少得多，因为脚本部件并不提供用户界面。</BLOCKQUOTE>
</li>
</UL>

<P class="labelproc"><B>要创建一个 OBJECT 元素 </B>

<UL type="disc">
	<LI>创建一个 <A HREF="leteleobject.htm">&lt;object&gt;</A> 元素。该元素应位于 &lt;component&gt; 元素内，但应在任何其他元素（如 &lt;script&gt; 元素）之外。</li>
</UL>

<P>下面的示例演示了脚本部件中的对象声明。</P>

<PRE class="code">&lt;object id="cnn" progid="ADODB.Connection"/&gt;</PRE>

<H2 class="dtH2">引用外部类型库</H2>

<P>很多要使用的部件都支持类型库，类型库提供了该部件的类及其成员的一个完整列表。通过引用部件的类型库，就可以使用在类型库中定义的常数。</P>

<P class="labelproc"><B>要包含一个类型库引用</B>

<UL type="disc">
	<LI>在脚本部件中包括一个 <A HREF="letelereference.htm">&lt;reference&gt;</A> 元素，在其中指定要包括的类型库的位置和名称。例如：
<PRE class="code">&lt;reference object="ADODB.Connection.2.0"/&gt;</PRE>
</li>
</UL>

<H2 class="dtH2">引用资源</H2>

<P>资源元素可以包括会在各个版本间更改的信息、可能要翻译的字符串以及其他值。</P>

<P class="labelproc"><B>要引用资源 </B>

<OL type="1">
	<LI>在脚本部件的 &lt;public&gt; 和 &lt;script&gt; 元素 (以及 &lt;implements&gt; 元素，如果有的话)之外，为每个要定义的资源创建一个 <A HREF="leteleresource.htm">&lt;resource&gt;</A> 元素，并给每个元素一个唯一的 ID。下面的示例演示了两个 &lt;resource&gt; 元素：
<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>CDATA项是必须的，以便使 &lt;resource&gt; 元素的内容在分析程序中是不透明的。详细内容请参阅<A HREF="letxml.htm">脚本部件文件和XML一致性</A>. </BLOCKQUOTE>

<PRE class="code">&lt;component id="MyScriptlet"&gt;
&lt;public&gt;
&nbsp;&nbsp;&nbsp;&lt;method name="random" internalName="getRandomNumber"/&gt;
&lt;/public&gt;
&lt;resource id="errNonNumeric"&gt;&lt;![CDATA[Non-numeric value passed]]&gt;
&lt;/resource&gt;
&lt;resource id="errOutOfRange"&gt;&lt;![CDATA[Passed value is out of range ]]&gt;
&lt;/resource&gt; </PRE>
</li>

	<LI>在脚本中，可以通过调用 <A HREF="letfctgetresource.htm">getResource</A> 函数来包括这些资源文本或数字，如下例所示。
<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>CDATA 项是必需的，以使 &lt;script&gt; 元素中的脚本在分析程序中是不透明的。详细信息请参阅<A HREF="letxml.htm">脚本部件文件和 XML 一致性</A>。</BLOCKQUOTE>

<PRE class="code">&lt;script language="VBScript"&gt;
&lt;![CDATA[
Function getRandomNumber(upperBound)
&nbsp;&nbsp;&nbsp;If IsNumeric(upperBound) Then
 &nbsp;&nbsp;&nbsp;&nbsp; getRandomNumber = Cint(upperBound * Rnd + 1)
&nbsp;&nbsp;&nbsp;Else
 &nbsp;&nbsp;&nbsp;&nbsp; getRandomNumber=getResource("errNonNumeric")
&nbsp;&nbsp;&nbsp;End If
End Function
]]&gt;
&lt;/script&gt;</PRE>
</li>
</OL>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="letfilecont.htm">脚本部件文件的内容</A> | <A HREF="letrefpkg.htm">引用同一个程序包中的其他脚本部件</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
