<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>String 对象</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jsobjstring"></A>String 对象</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>可用于处理或格式化文本字符串以及确定和定位字符串中的子字符串。</P>

<H4 class="dtH4">语法</H4>

<PRE class="syntax"><I>newString</I> = <B>new String(</B>["s<I>tringLiteral</I>"]<B>)</B></PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>newString</I></DT>

<DD>必选项。要赋值为 <B>String</B> 对象的变量名。</dd>

<DT><I>stringLiteral</I></DT>

<DD>可选项。任意 Unicode 字符群。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P><B>String</B> 对象可用字符串文字显式创建。用这种方法创建的 <B>String</B> 对象（指以标准字符串形式）与用 <B>new</B> 运算符创建的 <B>String</B> 对象处理上不同。所有字符串文字共享公用的全局字符串对象。如果为字符串文字添加属性，则它对所有标准字符串对象都是可用的： </P>

<PRE class="code">var alpha, beta;
alpha = "这是一个字符串";
beta = "这也是一个字符串";

alpha.test = 10;</PRE>

<P>在前一示例中，这时为 <I>beta</I> 和所有将来的字符串定义 <I>test</I>。然而，在下面的例子中，被添加属性的处理略有不同： </P>

<PRE class="code">var gamma, delta;
gamma = new String("这是一个字符串");
delta = new String("这是也一个字符串");

gamma.test = 10;</PRE>

<P>在这种情况下，不为 <I>delta</I> 定义 <I>test</I>。每个用 <B>new</B> <B>String</B> 声明的 <B>String</B> 对象有其自己的一组成员。这是对 <B>String</B> 对象和字符串文字的处理不同的唯一情况。</P>



<H4 class="dtH4"><A NAME="js56jsobjstringprop"></A>属性</H4>

<P><A HREF="js56jsproconstructor.htm">constructor 属性</A> | <A HREF="js56jsprolengthstring.htm">length 属性</A> | <A HREF="js56jsproprototype.htm">prototype 属性</A></P>



<H4 class="dtH4"><A NAME="js56jsobjstringmeth"></A>方法</H4>

<P><A HREF="js56jsmthanchor.htm">anchor 方法</A> | <A HREF="js56jsmthbig.htm">big 方法</A> | <A HREF="js56jsmthblink.htm">blink 方法</A> | <A HREF="js56jsmthbold.htm">bold 方法</A> | <A HREF="js56jsmthcharat.htm">charAt 方法</A> | <A HREF="js56jsmthcharcodeat.htm">charCodeAt 方法</A> | <A HREF="js56jsmthconcatstring.htm">concat 方法</A> | <A HREF="js56jsmthfixed.htm">fixed 方法</A> | <A HREF="js56jsmthfontcolor.htm">fontcolor 方法</A> | <A HREF="js56jsmthfontsize.htm">fontsize 方法</A> | <A HREF="js56jsmthfromcharcode.htm">fromCharCode 方法</A> | <A HREF="js56jsmthindexof.htm">indexOf 方法</A> | <A HREF="js56jsmthitalics.htm">italics 方法</A> | <A HREF="js56jsmthlastindexof.htm">lastIndexOf 方法</A> | <A HREF="js56jsmthlink.htm">link 方法</A> | <A HREF="js56jsmthmatch.htm">match 方法</A> | <A HREF="js56jsmthreplace.htm">replace 方法</A> | <A HREF="js56jsmthsearch.htm">search 方法</A> | <A HREF="js56jsmthslicestring.htm">slice 方法</A> | <A HREF="js56jsmthsmall.htm">small 方法</A> | <A HREF="js56jsmthsplit.htm">split 方法</A> | <A HREF="js56jsmthstrike.htm">strike 方法</A> | <A HREF="js56jsmthsub.htm">sub 方法</A> | <A HREF="js56jsmthsubstr.htm">substr 方法</A> | <A HREF="js56jsmthsubstring.htm">substring 方法</A> | <A HREF="js56jsmthsup.htm">sup 方法</A> | <A HREF="js56jsmthtolowercase.htm">toLowerCase 方法</A> | <A HREF="js56jsmthtouppercase.htm">toUpperCase 方法</A> | <A HREF="js56jsmthtostring.htm">toString 方法</A> | <A HREF="js56jsmthvalueof.htm">valueOf 方法</A></P>

<H4 class="dtH4">要求</H4>

<P><A HREF="js56jsoriversioninformation.htm">版本 1</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="js56jsoprnew.htm">new 运算符</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
