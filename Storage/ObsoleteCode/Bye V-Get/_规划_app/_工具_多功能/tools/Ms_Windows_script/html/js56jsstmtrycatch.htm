<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>try...catch...finally 语句</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jsstmtrycatch"></A>try...catch...finally 语句</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>为 JScript 实现错误处理。</P>

<PRE class="syntax"><B>try</B> <B>{</B>
   <I>tryStatements</I><B>}</B>
<B>catch(</B><I>exception</I><B>){</B>
   <I>catchStatements</I><B>}</B>
<B>finally {</B>
   <I>finallyStatements</I><B>}</B></PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>tryStatement</I></DT>

<DD>必选项。可能发生错误的语句。</dd>

<DT><I>exception</I></DT>

<DD>必选项。任何变量名。<I>exception</I> 的初始化值是扔出的错误的值。</dd>

<DT><I>catchStatement</I></DT>

<DD>可选项。处理在相关联的 <I>tryStatement</I> 中发生的错误的语句。</dd>

<DT><I>finallyStatements</I></DT>

<DD>可选项。在所有其他过程发生之后无条件执行的语句。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P><B>try...catch...finally </B>语句提供了一种方法来处理可能发生在给定代码块中的某些或全部错误，同时仍保持代码的运行。如果发生了程序员没有处理的错误，JScript 只给用户提供它的普通错误信息，就好象没有错误处理一样。</P>

<P><I>tryStatements</I> 参数包含可能发生错误的代码，而 <I>catchStatement</I> 则包含处理任何发生了的错误的代码。如果在 <I>tryStatements</I> 中发生了一个错误，则程序控制被传给 <I>catchStatements</I> 来处理。<I>exception</I> 的初始化值是发生在 <I>tryStatements</I> 中的错误的值。如果错误不发生，则不执行 <I>catchStatements</I>。</P>

<P>如果在与发生错误的 <I>tryStatements</I> 相关联的 <I>catchStatements</I> 中不能处理该错误，则使用 <B>throw</B> 语句来传播、或重新扔出这个错误给更高级的错误处理程序。</P>

<P>在执行完 <I>tryStatements</I> 中的语句，并在 <I>catchStatements </I>的所有错误处理发生之后，可无条件执行 <I>finallyStatements</I> 中的语句。</P>

<P>请注意，即使在 <B>try</B> 或 <B>catch</B> 块中返回一个语句，或在 <B>catch</B> 块重新扔出一个错误，仍然会执行 <I>finallyStatements</I> 编码。一般将确保 <I>finallyStatments</I> 的运行，除非存在未处理的错误。（例如，在 <B>catch</B> 块中发生运行时错误。）。</P>

<H4 class="dtH4">示例</H4>

<P>下面的例子阐明了JScript 特例处理是如何进行的。</P>

<PRE class="code">try {
  print("Outer try running..");
  try {
    print("Nested try running...");
    throw "an error";
  }
  catch(e) {
    print("Nested catch caught " + e);
    throw e + " re-thrown";
  }
  finally {
    print("Nested finally is running...");
  }   
}
catch(e) {
  print("Outer catch caught " + e);
}
finally {
  print("Outer finally running");
}
// Windows Script Host 作出该修改从而得出 WScript.Echo(s)
function print(s){
   document.write(s);
}</PRE>

<P>将得出以下结果：</P>

<PRE class="code">Outer try running..
Nested try running...
Nested catch caught an error
Nested finally is running...
Outer catch caught an error re-thrown
Outer finally running</PRE>

<H4 class="dtH4">要求</H4>

<P><A HREF="js56jsoriversioninformation.htm">版本 5</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="js56jsstmthrow.htm">throw 语句</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
