<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>使用循环语句</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Visual&nbsp;Basic&nbsp;Scripting&nbsp;Edition</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vbslooping"></A>使用循环语句</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>循环用于重复执行一组语句。循环可分为三类：一类在条件变为 <B>False</B> 之前重复执行语句，一类在条件变为 <B>True</B> 之前重复执行语句，另一类按照指定的次数重复执行语句。</P>

<P>在 VBScript 中可使用下列循环语句： 

<UL type="disc">
	<LI><A HREF="vsstmdo.htm">Do...Loop</A>： 当（或直到）条件为 <B>True</B> 时循环。</li>

	<LI><A HREF="vsstmwhile.htm">While...Wend</A>： 当条件为 <B>True</B> 时循环。</li>

	<LI><A HREF="vsstmfor.htm">For...Next</A>： 指定循环次数，使用计数器重复运行语句。</li>

	<LI><A HREF="vsstmforeach.htm">For Each...Next</A>：对于集合中的每项或数组中的每个元素，重复执行一组语句。</li>
</UL>

<H2 class="dtH2">使用 Do 循环</H2>

<P>可以使用 <B>Do...Loop</B> 语句多次（次数不定）运行语句块。当条件为 <B>True</B> 时或条件变为 <B>True</B> 之前，重复执行语句块。</P>

<H4 class="dtH4">当条件为 True 时重复执行语句</H4>

<P><B>While</B> 关键字用于检查 <B>Do...Loop</B> 语句中的条件。有两种方式检查条件：在进入循环之前检查条件（如下面的 ChkFirstWhile 示例）；或者在循环至少运行完一次之后检查条件（如下面的 ChkLastWhile 示例）。在 ChkFirstWhile 过程中，如果 myNum 的初始值被设置为 9 而不是 20，则永远不会执行循环体中的语句。在 ChkLastWhile 过程中，循环体中的语句只会执行一次，因为条件在检查时已经为 <B>False</B>。</P>

<PRE class="code">Sub ChkFirstWhile()
   Dim counter, myNum
   counter = 0
   myNum = 20
   Do While myNum &gt; 10
      myNum = myNum - 1
      counter = counter + 1
   Loop
   MsgBox "循环重复了 " &amp; counter &amp; " 次。"
End Sub

Sub ChkLastWhile()
   Dim counter, myNum
   counter = 0
   myNum = 9
   Do
      myNum = myNum - 1
      counter = counter + 1
   Loop While myNum &gt; 10
   MsgBox "循环重复了 " &amp; counter &amp; " 次。"
End Sub</PRE>

<H4 class="dtH4">重复执行语句直到条件变为 True</H4>

<P><B>Until</B> 关键字用于检查 <B>Do...Loop</B> 语句中的条件。有两种方式检查条件：在进入循环之前检查条件（如下面的 ChkFirstUntil 示例）；或者在循环至少运行完一次之后检查条件（如下面的 ChkLastUntil 示例）。只要条件为 <B>False</B>，就会进行循环。</P>

<PRE class="code">Sub ChkFirstUntil()
   Dim counter, myNum
   counter = 0
   myNum = 20
   Do Until myNum = 10
      myNum = myNum - 1
      counter = counter + 1
   Loop
   MsgBox "循环重复了 " &amp; counter &amp; " 次。"
End Sub

Sub ChkLastUntil()
   Dim counter, myNum
   counter = 0
   myNum = 1
   Do
      myNum = myNum + 1
      counter = counter + 1
   Loop Until myNum = 10
   MsgBox "循环重复了 " &amp; counter &amp; " 次。"
End Sub</PRE>

<H4 class="dtH4">退出循环</H4>

<P><B>Exit Do</B> 语句用于退出 <B>Do...Loop</B> 循环。因为通常只是在某些特殊情况下要退出循环（例如要避免死循环），所以可在 <B>If...Then...Else</B> 语句的 <B>True</B> 语句块中使用 <B>Exit Do</B> 语句。如果条件为 <B>False</B>，循环将照常运行。</P>

<P>在下面的示例中，myNum 的初始值将导致死循环。<B>If...Then...Else</B> 语句检查此条件，防止出现死循环。</P>

<PRE class="code">Sub ExitExample()
   Dim counter, myNum
      counter = 0
      myNum = 9
      Do Until myNum = 10
         myNum = myNum - 1
         counter = counter + 1
         If myNum &lt; 10 Then Exit Do
      Loop
      MsgBox "循环重复了 " &amp; counter &amp; " 次。"
End Sub</PRE>

<H2 class="dtH2">使用 While...Wend</H2>

<P><B>While...Wend</B> 语句是为那些熟悉其用法的用户提供的。但是由于 <B>While...Wend</B> 缺少灵活性，所以建议最好使用 <B>Do...Loop</B> 语句。</P>

<H2 class="dtH2">使用 For...Next</H2>

<P><B>For...Next</B> 语句用于将语句块运行指定的次数。在循环中使用计数器变量，该变量的值随每一次循环增加或减少。</P>

<P>例如，下面的示例将过程 MyProc 重复执行 50 次。<B>For</B> 语句指定计数器变量 x 及其起始值与终止值。<B>Next</B> 语句使计数器变量每次加 1。</P>

<PRE class="code">Sub DoMyProc50Times()
   Dim x
   For x = 1 To 50
      MyProc
   Next
End Sub</PRE>

<P>关键字 <B>Step</B> 用于指定计数器变量每次增加或减少的值。在下面的示例中，计数器变量 j 每次加 2。循环结束后，total 的值为 2、4、6、8 和 10 的总和。</P>

<PRE class="code">Sub TwosTotal()
   Dim j, total
   For j = 2 To 10 Step 2
      total = total + j
   Next
   MsgBox "总和为 " &amp; total &amp; "。"
 End Sub</PRE>

<P>要使计数器变量递减，可将 <B>Step</B> 设为负值。此时计数器变量的终止值必须小于起始值。在下面的示例中，计数器变量 myNum 每次减 2。循环结束后，total 的值为 16、14、12、10、8、6、4 和 2 的总和。</P>

<PRE class="code">Sub NewTotal()
   Dim myNum, total
   For myNum = 16 To 2 Step -2
      total = total + myNum
   Next
   MsgBox "总和为 " &amp; total &amp; "。"
End Sub</PRE>

<P><B>Exit For</B> 语句用于在计数器达到其终止值之前退出 <B>For...Next</B> 语句。因为通常只是在某些特殊情况下（例如在发生错误时）要退出循环，所以可以在 <B>If...Then...Else</B> 语句的 <B>True</B> 语句块中使用 <B>Exit For</B> 语句。如果条件为 <B>False</B>，循环将照常运行。</P>

<H2 class="dtH2">使用 For Each...Next</H2>

<P><B>For Each...Next</B> 循环与 <B>For...Next</B> 循环类似。<B>For Each...Next</B> 不是将语句运行指定的次数，而是对于数组中的每个元素或对象集合中的每一项重复一组语句。这在不知道集合中元素的数目时非常有用。</P>

<P>在以下示例中，<B>Dictionary</B> 对象的内容用于将文本分别放置在多个文本框中： </P>

<PRE class="code">&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;窗体与元素&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;SCRIPT LANGUAGE="VBScript"&gt;
&lt;!--
Sub cmdChange_OnClick
   Dim d                   '创建一个变量
   Set d = CreateObject("Scripting.Dictionary")
   d.Add "0", "Athens"     '添加键和项目
   d.Add "1", "Belgrade"
   d.Add "2", "Cairo"

   For Each I in d
       Document.frmForm.Elements(I).Value = D.Item(I)
   Next
End Sub
--&gt;
&lt;/SCRIPT&gt;
&lt;BODY&gt;
&lt;CENTER&gt;
&lt;FORM NAME="frmForm"

&lt;Input Type = "Text"&gt;&lt;p&gt;
&lt;Input Type = "Text"&gt;&lt;p&gt;
&lt;Input Type = "Text"&gt;&lt;p&gt;
&lt;Input Type = "Text"&gt;&lt;p&gt;
&lt;Input Type = "Button" NAME="cmdChange" VALUE="单击此处"&gt;&lt;p&gt;
&lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
