<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>&lt;implements&gt; 元素</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Windows&nbsp;脚本部件</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="leteleimplements"></A>&lt;implements&gt; 元素</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>给脚本部件指定别的 COM 接口处理程序。</P>

<PRE class="syntax"><B>&lt;implements</B> type="<I>COMHandlerName</I>"<I> </I>[id="<I>internalName</I>"] [default=<I>fAssumed</I>]<B>&gt;</B>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此处为处理程序的专门信息
<B>&lt;/implements&gt;</B></PRE>

<H4 class="dtH4">值</H4>

<DL>
<DT><I>COMHandlerName</I></DT>

<DD>要引用的接口处理程序的名称。接口处理程序通常是作为 DLL 实现的，因此必须确保有这个 DLLs，并且已经在脚本部件的开发环境中注册。有些处理程序，诸如 Automation 和 ASP 处理程序，已内置于脚本部件的运行时程序 (Scrobj.dll)。可用的接口处理程序示例包括：

<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=33%>接口处理程序</TH>
<TH width=32%>描述</TH>
<TH width=35%>如何实现的</TH>
</TR>

<TR VALIGN="top">
<TD width=33%><A HREF="letimplasp.htm">ASP</A></TD>
<TD width=32%>使脚本小程序可以访问 Microsoft Internet Information Services (IIS) 的 Active Server Page (ASP) 对象模型。</TD>
<TD width=35%>已内置于 Scrobj.dll</TD>
</TR>

<TR VALIGN="top">
<TD width=33%><A HREF="letimpldhtml.htm">DHTML Behaviors</A></TD>
<TD width=32%>允许 behavior 脚本部件与包含页进行通信，因此它可以激发事件并访问 DHTML 对象模型。</TD>
<TD width=35%>已内置于 Scrobj.dll</TD>
</TR>
</table></div>

</dd>

<DT>internalName</DT>

<DD>(可选项) 在脚本中用来引用该处理程序的名称。缺省情况下，脚本部件的属性、方法、事件以及其他成员在全局命名空间都是可用的。不过，如果在各个 &lt;implements&gt; 元素之间存在命名冲突，可以在名字前面加上所属的 &lt;implements&gt; 元素 ID 加以区分，如下所示：

<PRE class="code">&lt;implements type="Behavior" id="sctBehavior"&gt;
&nbsp;&nbsp;&nbsp;[...]
&lt;/implements&gt;

[...]

&lt;script language="JScript"&gt;
&nbsp;&nbsp;&nbsp;// [...]
&nbsp;&nbsp;&nbsp;sctBehavior.fireEvent("onResultChange",oEvent);
&lt;/script&gt;</PRE>
</dd>

<DT>fAssumed</DT>

<DD>(可选项) 一个 Boolean 标记，指明假定在脚本中使用 <I>internalName</I>。该属性的缺省值为 true，且由处理程序说明的对象模型的成员都将添加到全局脚本命名空间，并可以不加限制地访问。如果要将该属性设置为 false，并因此隐藏某个特定的 &lt;implements&gt; 元素的成员，只需包括这个属性。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>接口处理程序扩展了脚本部件运行时程序。接口处理程序是一个预先编译好的部件（通常用 C++ 编写），实现了特定 COM 接口。</P>

<P>缺省情况下脚本部件将实现 COM Automation 接口（具体说，就是 <B>IDispatchEx</B> COM 接口）。Automation 对象的属性、方法和事件都是在脚本部件的 <A HREF="letelepublic.htm">&lt;public&gt;</A> 元素中定义的。由于缺省实现的就是 Automation 处理程序，因此不必使用 &lt;implements&gt; 元素去实现它。</P>

<P>通过包括 &lt;implements&gt; 元素，脚本部件还可以实现附加的 COM 接口。在 &lt;implements&gt; 元素内，可以指定要实现接口的特定信息。每个接口处理程序需要不同的信息。例如，Behavior 脚本部件可以包括 <A HREF="leteleattach.htm">&lt;attach&gt;</A> 以及 <A HREF="letelelayout.htm">&lt;layout&gt;</A> 元素，这两个元素是 DHTML Behavior 接口特有的。</P>

<H4 class="dtH4">示例</H4>

<PRE class="code">&lt;implements type="Behavior"&gt;
&nbsp;&nbsp;&nbsp;&lt;event name="onResultChange" /&gt;
&lt;/implements&gt;</PRE>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="lethow.htm">脚本部件是如何运作的</A> | <A HREF="letfilecont.htm">脚本部件文件的内容</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
