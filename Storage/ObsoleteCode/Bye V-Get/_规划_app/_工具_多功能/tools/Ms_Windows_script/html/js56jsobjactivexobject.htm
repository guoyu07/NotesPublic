<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>ActiveXObject 对象</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jsobjactivexobject"></A>ActiveXObject 对象</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>启用并返回 Automation 对象的引用。</P>

<PRE class="syntax"><I>newObj</I> = <B>new</B> <B>ActiveXObject(</B><I>servername.typename</I>[<B>,</B> <I>location</I>]<B>)</B></PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>newObj</I></DT>

<DD>必选项。要赋值为 <B>ActiveXObject</B> 的变量名。</dd>

<DT><I>servername</I></DT>

<DD>必选项。提供该对象的应用程序的名称。</dd>

<DT><I>typename</I></DT>

<DD>必选项。要创建的对象的类型或类。</dd>

<DT><I>location</I></DT>

<DD>可选项。创建该对象的网络服务器的名称。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>Automation 服务器至少提供一类对象。例如，字处理应用程序可能提供应用程序对象、文档对象和工具栏对象。</P>

<P>要创建 Automation 对象，将新的 <B>ActiveXObject</B> 赋给对象变量： </P>

<PRE class="code">var ExcelSheet;
ExcelApp = new <code><b class="cfe">ActiveXObject</b></code>("Excel.Application");
ExcelSheet = new <code><b class="cfe">ActiveXObject(</b></code>"Excel<code><b class="cfe">.</b></code>Sheet"<code><b class="cfe">)</b></code>;</PRE>

<P>本代码启动创建对象的应用程序（在这种情况下，Microsoft Excel 工作表）。一旦对象被创建，就可以用定义的对象变量在代码中引用它。在下面的例子中，通过对象变量 ExcelSheet 访问新对象的属性和方法和其他 Excel 对象，包括 Application 对象和 ActiveSheet.Cells 集合。</P>

<PRE class="code">// 使 Excel 通过 Application 对象可见。
ExcelSheet.Application.Visible = true;
// 将一些文本放置到表格的第一格中。
ExcelSheet.ActiveSheet.Cells(1,1).Value = "This is column A, row 1";
// 保存表格。
ExcelSheet.SaveAs("C:\\TEST.XLS");
// 用 Application 对象用 Quit 方法关闭 Excel。
ExcelSheet.Application.Quit();</PRE>

<P>只有当 Internet 安全性关闭时才能完成在远程服务器中创建对象。要在远程网络计算机创建对象，可以将该计算机的名称传递给 <B>ActiveXObject</B> 的 <I>servername</I> 参数。该名称与共享名的机器名部分相同。比如共享名为 "\\myserver\public" 的网络，<I>servername</I> 是 "myserver"。另外，可以用 DNS 格式或 IP 地址指定 <I>servername</I>。</P>

<P>下面的代码返回在名为 "myserver" 的远程网络计算机上运行的 Excel 实例的版本号：</P>

<PRE class="code">function GetAppVersion() {
   var XLApp = new <code><b class="cfe">ActiveXObject(</b></code>"Excel<code><b class="cfe">.</b></code>Application"<code><b class="cfe">,</b></code> "MyServer"<code><b class="cfe">)</b></code>;
   return(XLApp.Version);
}</PRE>

<P>如果指定的远程服务器不存在或找不到时将发生错误。</P>

<H4 class="dtH4">要求</H4>

<P><A HREF="js56jsoriversioninformation.htm">版本 1</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="js56jsfctgetobject.htm">GetObject 函数</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
