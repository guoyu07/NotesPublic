<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>处理文件</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>脚本运行时库</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="sgworkingwithfiles"></A>处理文件</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>有两种主要的文件处理类型：

<UL type="disc">
	<LI>创建、添加或删除数据，以及读取文件 </li>

	<LI>移动、复制和删除文件 </li>
</UL>

<H2 class="dtH2">创建文件</H2>

<P>创建空文本文件（有时被叫做“文本流”）有三种方法。</P>

<P>第一种方法是用 <B>CreateTextFile</B> 方法。下面的示例示范了如何用 <B>CreateTextFile</B> 方法创建文本文件：</P>

<PRE class="code"><SPAN class="lang">[VBScript]
</SPAN>Dim fso, f1
Set fso = CreateObject("Scripting.FileSystemObject")
Set f1 = fso.CreateTextFile("c:\testfile.txt", True)
<SPAN class="lang">[JScript]
</SPAN>var fso, f1;
fso = new ActiveXObject("Scripting.FileSystemObject");
f1 = fso.CreateTextFile("c:\\testfile.txt", true);</PRE>

<P>创建文本文件的第二种方法是，使用 <B>FileSystemObject</B> 对象的 <B>OpenTextFile</B> 方法，并设置 <B>ForWriting</B> 标志。</P>

<PRE class="code"><SPAN class="lang">[VBScript]
</SPAN>Dim fso, ts
Const ForWriting = 2
Set fso = CreateObject("Scripting. FileSystemObject")
Set ts = fso.OpenTextFile("c:\test.txt", ForWriting, True)
<SPAN class="lang">[JScript]
</SPAN>var fso, ts;
var ForWriting= 2;
fso = new ActiveXObject("Scripting.FileSystemObject");
ts = fso.OpenTextFile("c:\\test.txt", ForWriting, true);</PRE>

<P>创建文本文件的第三种方法是，使用 <B>OpenAsTextStream</B> 方法，并设置 <B>ForWriting</B> 标志。要使用这种方法，使用下面的代码：</P>

<PRE class="code"><SPAN class="lang">[VBScript]
</SPAN>Dim fso, f1, ts
Const ForWriting = 2
Set fso = CreateObject("Scripting.FileSystemObject")
fso.CreateTextFile ("c:\test1.txt")
Set f1 = fso.GetFile("c:\test1.txt")
Set ts = f1.OpenAsTextStream(ForWriting, True)
<SPAN class="lang">[JScript]
</SPAN>var fso, f1, ts;
var ForWriting = 2;
fso = new ActiveXObject("Scripting.FileSystemObject");
fso.CreateTextFile ("c:\\test1.txt");
f1 = fso.GetFile("c:\\test1.txt");
ts = f1.OpenAsTextStream(ForWriting, true);</PRE>

<H2 class="dtH2">添加数据到文件中</H2>

<P>一旦创建了文本文件，使用下面的三个步骤向文件添加数据：</P>

<P>打开文本文件。</P>

<P>写入数据。</P>

<P>关闭文件。</P>

<P>要打开现有的文件，则使用 FileSystemObject 对象的 OpenTextFile 方法或 File 对象的 OpenAsTextStream 方法。</P>

<P>要写数据到打开的文本文件，则根据下表所述任务使用 TextStream 对象的 Write、WriteLine 或 WriteBlankLines 方法。</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=72%>任务</TH>
<TH width=28%>方法</TH>
</TR>

<TR VALIGN="top">
<TD width=72%>向打开的文本文件写数据，不用后续一个新行字符。</TD>
<TD width=28%>Write</TD>
</TR>

<TR VALIGN="top">
<TD width=72%>向打开的文本文件写数据，后续一个新行字符。</TD>
<TD width=28%>WriteLine</TD>
</TR>

<TR VALIGN="top">
<TD width=72%>向打开的文本文件写一个或多个空白行。</TD>
<TD width=28%>WriteBlankLines</TD>
</TR>
</table></div>

<P>要关闭一个打开的文件，则使用 <B>TextStream</B> 对象的 <B>Close</B> 方法。</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>新行字符包含一个或几个字符（取决于操作系统），以把光标移动到下一行的开始位置（回车/换行）。注意某些字符串末尾可能已经有这个非打印字符了。</BLOCKQUOTE>

<P>下面的例子示范了如何打开文件，和同时使用三种写方法来向文件添加数据，然后关闭文件：</P>

<PRE class="code"><SPAN class="lang">[VBScript]
</SPAN>Sub CreateFile()
   Dim fso, tf
   Set fso = CreateObject("Scripting.FileSystemObject")
   Set tf = fso.CreateTextFile("c:\testfile.txt", True)
   ' 写一行，并带有一个新行字符。
   tf.WriteLine("Testing 1, 2, 3.") 
   '  向文件写三个新行字符。      
   tf.WriteBlankLines(3) 
   ' 写一行。
   tf.Write ("This is a test.") 
   tf.Close
End Sub
<SPAN class="lang">[JScript]</SPAN>
function CreateFile()
{
   var fso, tf;
   fso = new ActiveXObject("Scripting.FileSystemObject");
   tf = fso.CreateTextFile("c:\\testfile.txt", true);
   // 写一行，并带有一个新行字符。
   tf.WriteLine("Testing 1, 2, 3.") ;
   // 向文件写三个新行字符。
   tf.WriteBlankLines(3) ;
   // 写一行。
   tf.Write ("This is a test.");
   tf.Close();
}</PRE>

<H2 class="dtH2">读取文件</H2>

<P>要从文本文件读取数据，则使用 <B>TextStream</B> 对象的 <B>Read</B>、<B>ReadLine</B> 或 <B>ReadAll</B> 方法。下表描述了不同的任务应使用哪种方法。</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=78%>任务</TH>
<TH width=22%>方法</TH>
</TR>

<TR VALIGN="top">
<TD width=78%>从文件读取指定数量的字符。</TD>
<TD width=22%>Read</TD>
</TR>

<TR VALIGN="top">
<TD width=78%>读取一整行（一直到但不包括新行字符）。</TD>
<TD width=22%>ReadLine</TD>
</TR>

<TR VALIGN="top">
<TD width=78%>读取文本文件的整个内容。</TD>
<TD width=22%>ReadAll</TD>
</TR>
</table></div>

<P>如果使用 <B>Read</B> 或 <B>ReadLine</B> 方法，并且想跳过数据的特殊部分，则使用 <B>Skip</B> 或 <B>SkipLine</B> 方法。read 方法的结果文本存在一个字符串中，该字符串可以显示在一个控件中，也可以用字符串函数（如 <B>Left</B>、<B>Right</B> 和 <B>Mid</B>）来分析，连接等等。</P>

<P>下面的例子示范了如何打开文件，和如何写数据到文件中并从文件读取数据：</P>

<PRE class="code"><SPAN class="lang">[VBScript]
</SPAN>Sub ReadFiles
   Dim fso, f1, ts, s
   Const ForReading = 1
   Set fso = CreateObject("Scripting.FileSystemObject")
   Set f1 = fso.CreateTextFile("c:\testfile.txt", True)
   ' 写入一行。
   Response.Write "Writing file &lt;br&gt;"
   f1.WriteLine "Hello World"
   f1.WriteBlankLines(1)
   f1.Close
   ' 读取文件内容。
   Response.Write "Reading file &lt;br&gt;"
   Set ts = fso.OpenTextFile("c:\testfile.txt", ForReading)
   s = ts.ReadLine
   Response.Write "File contents = '" &amp; s &amp; "'"
   ts.Close
End Sub
<SPAN class="lang">[JScript]</SPAN>
function ReadFiles()
{
   var fso, f1, ts, s;
   var ForReading = 1;
   fso = new ActiveXObject("Scripting.FileSystemObject");
   f1 = fso.CreateTextFile("c:\\testfile.txt", true);
   // 写入一行。
   Response.Write("Writing file &lt;br&gt;");
   f1.WriteLine("Hello World");
   f1.WriteBlankLines(1);
   f1.Close();
   // 读取文件内容。
   Response.Write("Reading file &lt;br&gt;");
   ts = fso.OpenTextFile("c:\\testfile.txt", ForReading);
   s = ts.ReadLine();
   Response.Write("File contents = '" + s + "'");
   ts.Close();
}</PRE>

<H2 class="dtH2">移动、复制和删除文件</H2>

<P>FSO 对象模型各有两种方法移动、复制和删除文件，如下表所述。</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=18%>任务</TH>
<TH width=82%>方法</TH>
</TR>

<TR VALIGN="top">
<TD width=18%>移动文件</TD>
<TD width=82%>File.Move 或 FileSystemObject.MoveFile</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>复制文件</TD>
<TD width=82%>File.Copy 或 FileSystemObject.CopyFile</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>删除文件</TD>
<TD width=82%>File.Delete 或 FileSystemObject.DeleteFile</TD>
</TR>
</table></div>

<P>下面示例在驱动器 C 的根目录中创建一个文本文件，向其中写一些信息，然后把它移动到 \tmp 目录中，并在 \temp 中做一个备份，最后把它们从两个目录中删掉。</P>

<P>要运行下面的示例，需要先在驱动器 C 的根目录中创建 \tmp 和 \temp 目录：</P>

<PRE class="code"><SPAN class="lang">[VBScript]
</SPAN>Sub ManipFiles
   Dim fso, f1, f2, s
   Set fso = CreateObject("Scripting.FileSystemObject")
   Set f1 = fso.CreateTextFile("c:\testfile.txt", True)
   Response.Write "Writing file &lt;br&gt;"
   ' 写入一行。
   f1.Write ("This is a test.")
   ' 关闭写入到的文件。
   f1.Close
   Response.Write "Moving file to c:\tmp &lt;br&gt;"
   ' 获取到 C:\ 根目录中文件的句柄。
   Set f2 = fso.GetFile("c:\testfile.txt")
   ' 将文件移到 \tmp 目录。
   f2.Move ("c:\tmp\testfile.txt")
   Response.Write "Copying file to c:\temp &lt;br&gt;"
   ' 将文件复制到 \temp。
   f2.Copy ("c:\temp\testfile.txt")
   Response.Write "Deleting files &lt;br&gt;"
   ' 获得文件当前位置的句柄。
   Set f2 = fso.GetFile("c:\tmp\testfile.txt")
   Set f3 = fso.GetFile("c:\temp\testfile.txt")
   ' 删除文件。
   f2.Delete
   f3.Delete
   Response.Write "All done!"
End Sub
<SPAN class="lang">[JScript]</SPAN>
function ManipFiles()
{
   var fso, f1, f2, s;
   fso = new ActiveXObject("Scripting.FileSystemObject");
   f1 = fso.CreateTextFile("c:\\testfile.txt", true);
   Response.Write("Writing file &lt;br&gt;");
   // 写入一行。
   f1.Write("This is a test.");
   // 关闭写入到的文件。
   f1.Close();
   Response.Write("Moving file to c:\\tmp &lt;br&gt;");
   // 获取到 C:\ 根目录中文件的句柄。
   f2 = fso.GetFile("c:\\testfile.txt");
   // 将文件移到 \tmp 目录。
   f2.Move ("c:\\tmp\\testfile.txt");
   Response.Write("Copying file to c:\\temp &lt;br&gt;");
   // 将文件复制到 \temp。
   f2.Copy ("c:\\temp\\testfile.txt");
   Response.Write("Deleting files &lt;br&gt;");
   // 获得文件当前位置的句柄。
   f2 = fso.GetFile("c:\\tmp\\testfile.txt");
   f3 = fso.GetFile("c:\\temp\\testfile.txt");
   // 删除文件。
   f2.Delete();
   f3.Delete();
   Response.Write("All done!");
}</PRE>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
