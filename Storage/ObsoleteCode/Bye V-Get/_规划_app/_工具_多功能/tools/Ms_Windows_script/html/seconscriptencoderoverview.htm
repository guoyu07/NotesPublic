<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>脚本编码器概述</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>脚本运行时库</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="seconscriptencoderoverview"></A>脚本 Encoder 概述</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>脚本 Encoder 是一种简单的命令行工具，它使脚本设计者能够对自己的最终脚本进行编码，这样 Web 主机和 Web 客户机就不能查看或修改它们的源代码了。注意，这种编码只能防止他人偶然查看您的代码，但并不能防止执着的电脑黑客看到您的一举一动。</P>

<P>Web 设计者在 Web 页和服务器端的 Active Server Page (.ASP) 上使用脚本编写方法，来添加几乎可以想象的各种功能。此外，脚本编写还由 Windows&reg; Scripting Host (WSH) 使用，并可用在许多其他应用程序中，其结果也同样令人难忘。</P>

<P>到目前为止，使用脚本的一个缺点在于它不能保护其中所包含的知识产权，也不能保证用户获得的内容即他们所创建的内容。高明的算法和精心设计的脚本总是完全可见的，因为它们是以纯文本的形式保存的。其结果是，每个级别的脚本用户都可以看到脚本设计者的代码，然后采用它，修改它，并使其成为自己的代码。很明显，如果要试图在竞争极为激烈的环境中获得一席之地，这就不是一个好的方法。</P>

<P>由于引入了脚本小程序，保护源代码就变得更为重要了。脚本设计者希望使用这种简单的部件结构，但他们未必希望将自己的源代码与别人共享。将脚本编码后，对最终文件任何部分的更改都将导致其不能工作，因此可确保已编码脚本的绝对完整性。</P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="seusingscriptencoder.htm">使用脚本 Encoder</A> | <A HREF="seconscriptencodersyntax.htm">脚本 Encoder 语法</A> | <A HREF="seconencodingsample.htm">脚本编码示例</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
