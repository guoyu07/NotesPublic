<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>replace 方法</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jsmthreplace"></A>replace 方法</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>返回根据正则表达式进行文字替换后的字符串的复制。</P>

<PRE class="syntax">stringObj.<B>replace(</B>rgExp, replaceText<B>)</B></PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>stringObj</I></DT>

<DD>必选项。要执行该替换的 <B>String</B> 对象或字符串文字。该字符串不会被 <B>replace</B> 方法修改。</dd>

<DT><I>rgExp</I></DT>

<DD>必选项。为包含正则表达式模式或可用标志的<B>正则表达式</B>对象。也可以是 <B>String</B> 对象或文字。如果 <I>rgExp </I>不是<B>正则表达式</B>对象，它将被转换为字符串，并进行精确的查找；不要尝试将字符串转化为正则表达式。</dd>

<DT><I>replaceText</I></DT>

<DD>必选项。是一个<B>String</B> 对象或字符串文字，对于<I>stringObj</I> 中每个匹配 <I>rgExp</I> 中的位置都用该对象所包含的文字加以替换。在 Jscript 5.5 或更新版本中，<I>replaceText</I> 参数也可以是返回替换文本的函数。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P><B>replace</B> 方法的结果是一个完成了指定替换的 <I>stringObj</I> 对象的复制。</P>

<P>下面任意的匹配变量都能用来识别最新的匹配以及找出匹配的字符串。在需要动态决定替换字符串的文本替换中可以使用匹配变量。</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=20%>字符</TH>
<TH width=80%>含义</TH>
</TR>

<TR VALIGN="top">
<TD width=20%><B>$$</B></TD>
<TD width=80%><B>$</B> （JScript 5.5 或更新版本）</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>$&amp;</B></TD>
<TD width=80%>指定与整个模式匹配的 <I>stringObj</I> 的部分。（JScript 5.5 或更新版本）</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>$`</B></TD>
<TD width=80%>指定由 <B>$&amp;</B> 描述的匹配之前的 <I>stringObj</I> 部分。（JScript 5.5 或更新版本）</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>$'</B></TD>
<TD width=80%>指定由 <B>$&amp;</B> 描述的匹配之后的 <I>stringObj</I> 部分。（JScript 5.5 或更新版本）</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>$<I>n</I></B></TD>
<TD width=80%>捕获的第 <I>n</I> 个子匹配，此处 <I>n</I> 为从1到9的十进制一位数。（JScript 5.5 或更新版本）</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>$<I>nn</I></B></TD>
<TD width=80%>捕获的第 <I>nn</I> 个子匹配，此处 <I>nn</I> 为从01到99的十进制两位数。（JScript 5.5 或更新版本）</TD>
</TR>
</table></div>

<P>如果 <I>replaceText</I> 为函数，对于每一个匹配的子字符串，调用该函数时带有下面的 m+3 个参数，此处 m 是在 <I>rgExp</I> 中捕获的左括弧的个数。第一个参数是匹配的子字符串。接下来的 <I>m</I> 个参数是查找中捕获的全部结果。第 <I>m</I>+2 个参数是在 <I>stringObj</I> 中匹配出现的偏移量，而第 <I>m</I>+3 个参数为 <I>stringObj</I>。结果为将每一匹配的子字符串替换为函数调用的相应返回值的字符串值。</P>

<P><B>Replace </B>方法更新全局 <B>RegExp</B> 对象的属性。</P>

<H4 class="dtH4">示例</H4>

<P>下面的示例演示了 <B>replace</B> 方法将第一次出现的单词 "The" 替换为单词 "A" 的用法。</P>

<PRE class="code">function ReplaceDemo(){
   var r, re;                    // 声明变量。
   var ss = "The man hit the ball with the bat.\n";
   ss += "while the fielder caught the ball with the glove.";
   re = /The/g;             // 创建正则表达式模式。
   r = <code><b class="cfe">ss.replace(</b></code>re<code><b class="cfe">,</b></code> "A"<code><b class="cfe">)</b></code>;    // 用 "A" 替换 "The"。
   return(r);                   // 返回替换后的字符串。
}</PRE>

<P>另外, <B>replace</B> 方法也可以替换模式中的子表达式。下面的范例演示了交换字符串中的每一对单词： </P>

<PRE class="code">function ReplaceDemo(){
   var r, re;                      // 声明变量。
   var ss = "The rain in Spain falls mainly in the plain.";
   re = /(\S+)(\s+)(\S+)/g;        // 创建正则表达式模式。
   r = <code><b class="cfe">ss.replace(</b></code>re<code><b class="cfe">,</b></code> "$3$2$1"<code><b class="cfe">)</b></code>;   // 交换每一对单词。
   return(r);                      // 返回结果字符串。
}</PRE>

<P>下面的示例（在 JScript 5.5 及更新版本中执行）执行的是从华氏到摄氏的转换，它演示了使用函数作为 <I>replaceText</I>。要想知道该函数是如何工作的，传递一个包含数值的字符串，数值后要紧跟 "F" （例如 "Water boils at 212"）。</P>

<PRE class="code">function f2c(s) {
  var test = /(\d+(\.\d*)?)F\b/g;    // 初始化模式。
  return(<code><b class="cfe">s.replace</b></code>
<code><b class="cfe">    (test,</b></code>
<code><b class="cfe">      function($0,$1,$2) { </b></code>
<code><b class="cfe">        return((($1-32) * 5/9) + "C");</b></code>
<code><b class="cfe">      }</b></code>
<code><b class="cfe">    )</b></code>
  );
}
document.write(f2c("Water freezes at 32F and boils at 212F."));</PRE>

<H4 class="dtH4">要求</H4>

<P><A HREF="js56jsoriversioninformation.htm">版本 1</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="js56jsmthexec.htm">exec 方法</A> | <A HREF="js56jsmthmatch.htm">match 方法</A> | <A HREF="js56jsobjregexp.htm">RegExp 对象</A> | <A HREF="js56jsmthsearch.htm">search 方法</A> | <A HREF="js56jsobjstring.htm#js56jsobjstringmeth">String 对象的方法</A> | <A HREF="js56jsmthtest.htm">test 方法</A></P>

<P>应用于： <A HREF="js56jsobjstring.htm">String 对象</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
