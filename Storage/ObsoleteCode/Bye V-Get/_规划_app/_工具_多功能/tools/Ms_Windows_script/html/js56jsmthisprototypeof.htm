<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>isPrototypeOf 方法</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jsmthisprototypeof"></A>isPrototypeOf 方法</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>返回一个布尔值，指出对象是否存在于另一个对象的原型链中。</P>

<PRE class="syntax"><I>object1</I>.<B>isPrototypeOf(</B><I>object2</I><B>)</B></PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>object1</I></DT>

<DD>必选项。一个对象的实例。</dd>

<DT><I>object2</I></DT>

<DD>必选项。另一个对象，将要检查其原型链。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>如果 <I>object2</I> 的 原型链中包含<I>object1</I>，那么 <B>isPrototypeOf </B>方法返回 <B>true</B>。原型链可以用来在同一个对象类型的不同实例之间共享功能。如果 <I>object2</I> 不是一个对象或者 <I>object1</I> 没有出现在 <I>object2 </I>中的原型链中，<B>isPrototypeOf </B>方法将返回 <B>false</B>。</P>

<H4 class="dtH4">示例</H4>

<P>以下示例阐述了 <B>isPrototypeOf</B> 方法的用法。</P>

<PRE class="code">function test(){
  var re = new RegExp();                        // 初始化变量。
  return (<code><b class="cfe">RegExp.prototype.isPrototypeOf(</b></code>re<code><b class="cfe">)</b></code>);  // 返回 true。
}</PRE>

<H4 class="dtH4">要求</H4>

<P><A HREF="js56jsoriversioninformation.htm">版本 5.5</A> </P>

<H4 class="dtH4">请参阅</H4>

<P>应用于：<A HREF="js56jsobjobject.htm">Object 对象</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
