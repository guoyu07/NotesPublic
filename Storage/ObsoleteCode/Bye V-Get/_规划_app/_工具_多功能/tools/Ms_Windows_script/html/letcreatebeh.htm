<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>创建 Behavior 脚本部件</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Windows&nbsp;脚本部件</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="letcreatebeh"></A>创建 Behavior 脚本部件</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>创建 Behavior 脚本部件与创建任何其他类型的脚本部件类似，只是需要将 Microsoft&reg; Internet Explorer 的事件链接到为响应这些事件而运行的脚本。</P>

<P>本主题分为下述部分： 

<UL type="disc">
	<LI><A HREF="#scriptletsbehaviormisccreatingabehaviors">创建 Behavior 脚本部件文件</A></li>

	<LI><A HREF="#scriptletsbehaviormiscbehaviorrelatedenh">对 DHTML 对象模型所做的与 Behavior 有关的增强</A></li>

	<LI><A HREF="#scriptletsbehaviormiscgettingeventparame">在脚本部件中获取事件参数</A></li>

	<LI><A HREF="#scriptletsbehaviormiscscoperules">范围规则</A></li>

	<LI><A HREF="#scriptletsbehaviormisctimingconsideratio">时序注意事项</A></li>
</UL>



<H2 class="dtH2"><A NAME="scriptletsbehaviormisccreatingabehaviors"></A>创建 Behavior 脚本部件文件</H2>

<P>Behavior 脚本部件包括一个 <A HREF="leteleimplements.htm">&lt;implements&gt;</A> 元素，用来指定 Behavior 接口处理程序。在 &lt;implements&gt; 元素内，可以使用： 

<UL type="disc">
	<LI><A HREF="leteleattach.htm">&lt;attach&gt;</A> 元素将来自包含文档的事件绑定到在脚本部件的独立的 &lt;script&gt; 元素中创建的函数。</li>

	<LI><A HREF="letelelayout.htm">&lt;layout&gt;</A> 元素定义要插入到包含文档中的 HTML 文本。</li>

	<LI><A HREF="leteleevent.htm">&lt;event&gt;</A> 元素定义将由脚本部件激活的自定义事件。</li>
</UL>

<P>Behavior 脚本部件还可以包括自定义属性和方法，以扩大包含文档中的元素已经可用的属性和方法。详细信息请参阅<A HREF="letexppromth.htm">在 Behavior 脚本部件中说明属性和方法</A>。</P>

<P>下面的示例演示了一个 Behavior 脚本部件，只要鼠标从包含页面中的某个元素上经过，该脚本部件就会更改该元素的颜色。为了实现这一点，该示例将 DHTML 的 onmouseover 和 onmouseout 事件绑定到脚本小程序中设置元素的 DHTML 样式属性的函数。通过绑定到 DHTML 窗口对象的 onload 事件，该示例还可以在初始化该文档时设置文档的链接颜色。</P>

<P>除了将事件绑定到脚本，脚本部件还可以将文本插入包含文档中的任何 &lt;H1&gt; 元素中，该文档被链接到该脚本部件。最后，它还说明并激活了一个称为 onchange 的事件，该事件使用一个称为 newvalue 的自定义属性扩展了 DHTML 窗口对象的事件对象。</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>CDATA 项是必需的，以使 &lt;script&gt; 元素中的脚本成为不透明的。详细信息请参阅<A HREF="letxml.htm">脚本部件文件和 XML 一致性</A>。</BLOCKQUOTE>

<PRE class="code">&lt;?XML version="1.0"?&gt;
&lt;component&gt;
&lt;implements <code><b class="cfe">type="Behavior"</b></code>&gt;
&nbsp;&nbsp;&nbsp;&lt;comment&gt; 当鼠标经过包含文档的该元素时，
&nbsp;&nbsp;&nbsp;下面的代码将将调用 do_nmousedown 和
&nbsp;&nbsp;&nbsp;do_mouseout 函数。&lt;/comment&gt;

&nbsp;&nbsp;&nbsp;&lt;attach event="onmouseover" handler="do_onmouseover"/&gt;
&nbsp;&nbsp;&nbsp;&lt;attach event="onmouseout" handler="do_onmouseout"/&gt;

&nbsp;&nbsp;&nbsp;&lt;comment&gt; 当窗口的 onload 事件被激活时，
&nbsp;&nbsp;&nbsp;这些代码将调用 init 函数。&lt;/comment&gt;

&nbsp;&nbsp;&nbsp;&lt;attach for="window" event="onload" handler="docinit"/&gt;

&nbsp;&nbsp;&nbsp;&lt;comment&gt; 下面定义了将出现在 
&nbsp;&nbsp;&nbsp;包含文档中的 HTML 文本。&lt;/comment&gt;

&nbsp;&nbsp;&nbsp;&lt;layout&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;This is the HTML to show in the element&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;/layout&gt;

&nbsp;&nbsp;&nbsp;&lt;comment&gt; 下面定义了一个自定义事件，该事件将 
&nbsp;&nbsp;&nbsp;通过脚本部件内的 fireEvent 方法被激活。&lt;/comment&gt;

&nbsp;&nbsp;&nbsp;&lt;public&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;event name="onchange"/&gt;
&nbsp;&nbsp;&nbsp;&lt;/public&gt;

&lt;/implements&gt;
&lt;script language="JScript"&gt;
&lt;![CDATA[
var normalColor, normalSpacing;
function do_onmouseover(){
&nbsp;&nbsp;&nbsp;// 保存原始值。
&nbsp;&nbsp;&nbsp;normalColor = style.color; 
&nbsp;&nbsp;&nbsp;normalSpacing= style.letterSpacing;
&nbsp;&nbsp;&nbsp;style.color = "red";
&nbsp;&nbsp;&nbsp;style.letterSpacing = 2;
&nbsp;&nbsp;&nbsp;oEvent = createEventObject();
&nbsp;&nbsp;&nbsp;oEvent.newcolor = "red";
&nbsp;&nbsp;&nbsp;fireEvent("onchange",oEvent);
}
function do_onmouseout(){
&nbsp;&nbsp;&nbsp;// 恢复原始值
&nbsp;&nbsp;&nbsp;style.color = normalColor;
&nbsp;&nbsp;&nbsp;style.letterSpacing = normalSpacing;
}

function docinit(){
&nbsp;&nbsp;&nbsp;document.linkColor = "red";
}
]]&gt;
&lt;/script&gt;
&lt;/component&gt;</PRE>

<P>在前面的代码中有一些情况需要说明： 

<UL type="disc">
	<LI>在脚本部件过程内，事件处理程序中的 <I>this</I> 隐含指针指向包含的函数，而不是激活该事件的元素。</li>

	<LI>如同在 HTML 页面内一样，可以在脚本部件的 &lt;script&gt;内放置内嵌脚本。在这个实例中，全局变量 normalColor 和 normalSpacing 都是在内嵌脚本中定义的。
<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>内嵌脚本是在将操作应用于元素之前执行的，这将限制哪些语句可以在内嵌脚本中执行。例如，如果该示例中的某个操作说明了一个称为 <B>hiliteColor</B> 的属性，内嵌脚本可以直接引用 <B>hiliteColor</B> （换句话说，它直接解析该脚本部件的命名空间）。不过，如果在内嵌脚本中使用 <I>Behavior</I>.element.hiliteColor 的形式来引用<B>hiliteColor</B> 则是不合法的，因为此时该操作尚没有应用于该元素。详细信息请参阅本主题稍后的<A HREF="#scriptletsbehaviormiscscoperules">范围规则</A> 以及<A HREF="#scriptletsbehaviormisctimingconsideratio">时序注意事项</A>。</BLOCKQUOTE>
</li>
</UL>



<H2 class="dtH2"><A NAME="scriptletsbehaviormiscbehaviorrelatedenh"></A>对 DHTML 对象模型所做的与 Behavior 有关的增强</H2>

<P>下面是为了增加对操作的支持， Microsoft&reg; Internet Explorer 5 对 DHTML 对象模型所做的增强。

<UL type="disc">
	<LI>级联式样式表 (CSS) 操作属性指定该操作的位置。</li>

	<LI>DHTML 的 <B>attachEvent</B> 和 <B>detachEvent</B> 方法使 Behavior 脚本部件可以接受来自包含的页面的事件通知，它是通过指定一个当对象激活事件时用来调用的函数来实现。</li>

	<LI>使用 DHTML 的 <B>uniqueID</B> 属性可以让操作脚本部件给该元素分配一个 ID。当脚本部件将代码插入包含页面以及需要指定要应用该操作的元素 ID 时，这个属性是很有用的。</li>
</UL>



<H2 class="dtH2"><A NAME="scriptletsbehaviormiscgettingeventparame"></A>在脚本部件中获取事件参数</H2>

<P>在 DHTML 中，DHTML 事件对象提供了事件的有关信息。尽管在 DHTML 中事件处理程序可以通过 DHTML 窗口对象来访问事件对象，但在操作脚本部件中事件对象是作为一个参数传递给事件处理程序的。</P>

<P>下面的代码来自一个虚构的计算器脚本部件，其中将键盘和鼠标事件都绑定到称为 <B>doCalc</B> 的脚本部件函数。<B>doCalc</B> 函数使用该事件对象来获取有关激活该事件的情况的信息。</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>CDATA 项是必需的，以使 &lt;script&gt; 元素中的脚本成为不透明的。详细信息请参阅<A HREF="letxml.htm">脚本部件文件和 XML 一致性</A>。</BLOCKQUOTE>

<PRE class="code">&lt;implements type="Behavior"&gt;
&nbsp;&nbsp;&nbsp;&lt;attach event="onclick" handler="doCalc"/&gt;
&nbsp;&nbsp;&nbsp;&lt;attach event="onkeydown" handler="doCalc"/&gt;
&lt;/implements&gt;

&lt;script language="jscript"&gt;
&lt;![CDATA[
function doCalc(oEventParam){
&nbsp;&nbsp;&nbsp;oElement = oEventParam.srcElement;
&nbsp;&nbsp;&nbsp;if(oEventParam.type == "keydown"){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sVal = KeyCodeToChar(oEventParam.keyCode);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (oEventParam.srcElement.type != "button"){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sVal = stripBlanks(oEventParam.srcElement.value);
&nbsp;&nbsp;&nbsp;}
}
// 此处为其他脚本。
]]&gt;
&lt;/script&gt;</PRE>



<H2 class="dtH2"><A NAME="scriptletsbehaviormiscscoperules"></A>范围规则</H2>

<P>在使用脚本部件时，实际使用了三个命名空间：操作、元素、以及包含文档。范围规则就是定义在操作脚本部件中解决名称冲突的顺序。名称冲突将按下面的顺序进行分析： </P>

<P>不管是变量、操作定义的属性、方法或事件，该名称都将被解析为由脚本部件的任何操作所定义的名称。</P>

<P>如果解析失败，则将该名称作为应用于该元素的属性、方法或事件来解析。</P>

<P>最后，该名称将作为应用于包含页面的窗口对象的属性、方法或事件的名称。</P>

<P>在下面的示例中，请注意如何使用上面的范围规则来解析这些名字： 

<UL type="disc">
	<LI>normalColor&nbsp;&nbsp;&nbsp;解析为由脚本开始处的操作所定义的变量。</li>

	<LI>style&nbsp;&nbsp;&nbsp;解析为包含文档中的元素的样式属性。
<PRE class="code">&lt;implements <code><b class="cfe">type="Behavior"</b></code>&gt;
&nbsp;&nbsp;&nbsp;&lt;attach event="onmouseover" handler="do_onmouseover"/&gt;
&nbsp;&nbsp;&nbsp;&lt;attach event="onmouseout "handler="do_onmouseout"/&gt;
&lt;/implements&gt;

&lt;script language="JScript"&gt;
&lt;![CDATA[
var normalColor, normalSpacing;
function event_onmouseover()
{
&nbsp;&nbsp;&nbsp;// 保存原始值。
&nbsp;&nbsp;&nbsp;normalColor = style.color;
&nbsp;&nbsp;&nbsp;normalSpacing = style.letterSpacing;

&nbsp;&nbsp;&nbsp;style.color = "red";
&nbsp;&nbsp;&nbsp;style.letterSpacing = 2;
}
function event_onmouseout()
{
&nbsp;&nbsp;&nbsp;// 恢复原始值。
&nbsp;&nbsp;&nbsp;style.color = normalColor;
&nbsp;&nbsp;&nbsp;style.letterSpacing = normalSpacing;
}
]]&gt;
&lt;/script&gt;</PRE>
</li>
</UL>



<H2 class="dtH2"><A NAME="scriptletsbehaviormisctimingconsideratio"></A>时序注意事项</H2>

<P>在创建操作时，了解何时将操作应用于元素是很重要的。在操作被应用之前，脚本不能访问操作所定义的属性值，因为这些值可能是在文档中设置的。</P>

<P>由于操作被封装在与 HTML 文档不同的独立文件中，它和该文档的其他部分是分开下载的。在分析和载入文档和操作时，该操作通过用 <A HREF="letmthattachn.htm">attachNotification</A> 方法指定的函数来接收通知。目前，可以使用“contentChange”或“documentReady” 通知来通知操作。在对已绑定该操作的元素内容进行分析后，只要该元素的内容被更改后就会发送“contentChange”通知。而“documentReady”通知是在下载并分析该文档后发送的。</P>

<P>由于只要实例化该操作，就会执行脚本部件文件中的内嵌脚本，因此在内嵌脚本中那些由操作定义的将在文档中设置的属性值可能无法被访问。不过，这些属性在首次发送 “contentChange”通知后就是可用的。</P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="letexppromth.htm">在 Behavior 脚本部件中说明属性和方法</A> | <A HREF="letexpcustom.htm">在 Behavior 脚本部件中说明自定义事件</A> | <A HREF="letbhref.htm">Behavior 处理程序参考</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
