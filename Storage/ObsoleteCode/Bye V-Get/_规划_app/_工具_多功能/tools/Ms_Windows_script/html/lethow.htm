<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>脚本部件是如何运作的</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Windows&nbsp;脚本部件</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="lethow"></A>脚本部件是如何运作的</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>Windows&reg; 脚本部件技术包括下述三个部分： 

<UL type="disc">
	<LI>脚本部件运行时程序 (Scrobj.dll)，用来帮助将 COM 请求发送到脚本部件。按照 COM 的术语，Scrobj.dll 是作为脚本部件的 inproc 服务器来执行。</li>

	<LI>接口处理程序，这是已编译好的实现特定 COM 接口的部件。不同的接口处理程序可以作为特定类型的 COM 部件。
<P>在脚本部件运行库中已内置了最常使用的接口处理程序，包括 COM Automation 接口处理程序、ASP 接口处理程序以及用于 DHTML Behavior 的处理程序。其他处理程序可作为外接部件或嵌在特定的应用程序中。
</li>

	<LI>脚本部件文件 (这是一个 .wsc 文件)。脚本部件文件属于 XML (可扩展的标记语言) 文件，其中包含要创建何种 COM 部件类型的信息（也就是要使用何种接口处理程序）。然后，根据该处理程序提供的可用功能，在脚本部件中编写脚本来实现这些接口。</li>
</UL>

<P>脚本部件运行时程序可以用作宿主应用程序的入口点。复杂的 COM，包括诸如 <B>IUnknown</B> 之类的 COM 标准接口的实现等，都包含在各种接口处理程序种。脚本部件只包含为实现该 COM 部件的功能所必需的脚本。</P>

<P>例如， Automation 部件是最常使用的 COM 部件类型，该部件拥有属性和方法，可以从其他应用程序来调用这些属性和方法。实现这个功能 &#0151; 诸如当某个方法被调用时发送给正确的函数 &#0151; 所必需的低层次 COM 接口都内置于 Automation 接口处理程序。在脚本部件文件中只需定义需要说明的属性、方法和事件，Automation 处理程序将确保在宿主应用程序需要它们时能正确调用。</P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="letintro.htm">脚本部件简介</A> | <A HREF="letcreates.htm">创建脚本部件</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
