<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Windows 脚本宿主对象模型</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Windows&nbsp;脚本宿主</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="wsconwindowsscripthostobjectmodel"></A>Windows 脚本宿主对象模型</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>Windows 脚本宿主对象模型由 14 个对象组成。根对象是 Wscript 对象。</P>

<P>下图展示了 Windows 脚本宿主对象模型的层次结构。单击该图中的对象可以查看它的相关帮助主题。</P>

<P class="fig"><!-- <IMG SRC="wswshhostobjectmodel.gif" ALT="" BORDER=0> --></P>
<map name="wsWSHHostObjectModel"><area shape="rect" coords="20,260,120,274" href="wslrfScriptExecObject.htm" alt="WshScriptExec Object" ><area shape="rect" coords="20,240,130,254" href="wsObjWshSpecialFolders.htm" alt="WshSpecialFolders Collection" ><area shape="rect" coords="20,220,130,234" href="wsObjWshEnvironment.htm" alt="WshEnvironment Collection" ><area shape="rect" coords="20,200,120,214" href="wsObjWshUrlShortcut.htm" alt="WshUrlShortCut Object" ><area shape="rect" coords="20,180,120,194" href="wsObjWshShortcut.htm" alt="WshShortCut Object" ><area shape="rect" coords="10,160,110,174" href="wsObjWshShell.htm" alt="WshShell Object" ><area shape="rect" coords="10,140,110,154" href="wsObjWshNetwork.htm" alt="WshNetwork Object"><area shape="rect" coords="30,120,130,134" href="wslrfRemote_WSH_ErrorObject.htm" alt="WshRemoteError Object"><area shape="rect" coords="20,100,120,114" href="wslrfRemote_WSHObject.htm" alt="WshRemote Object"><area shape="rect" coords="10,80,110,94" href="wslrfControllerObject.htm" alt="WshController Object"><area shape="rect" coords="20,60,120,74" href="wslrfUnnamedObject.htm" alt="WshUnnamed Collection"><area shape="rect" coords="20,40,120,54" href="wslrfNamedObject.htm" alt="WshNamed Collection"><area shape="rect" coords="10,20,110,34" href="wsObjWshArguments.htm" alt="WshArguments Collection"><area shape="rect" coords="0,0,100,14" href="wsObjWscript.htm" alt="WScript Object"></map><img src="wsWSHHostObjectModel.gif" usemap="#wsWSHHostObjectModel"><P></P>
<P>Windows 脚本宿主对象模型提供一个逻辑的、系统的方法来执行许多管理任务。它所提供的 COM 接口集可以分为两种主要类别：

<UL type="disc">
	<LI>脚本执行和疑难解答
<P>这个接口集允许脚本对 Windows 脚本宿主执行基本的操作，将消息输出到屏幕上，执行基本的 COM 函数（如 CreateObject 和 GetObject<B>）</B>。
</li>

	<LI>Helper 函数
<P>Helper 函数是用于执行以下操作的属性和方法：映射网络驱动器、与打印机连接、检索和修改环境变量以及操纵系统注册表项等。管理员还可以使用 Windows 脚本宿主的 helper 函数创建简单的登录脚本。
</li>
</UL>

<H2 class="dtH2">WSH 对象及其相关任务</H2>

<P>下表列出了 WSH 对象及其相关的典型任务。</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=25%>对象</TH>
<TH width=75%>该对象可用于</TH>
</TR>

<TR VALIGN="top">
<TD width=25%><B>Wscript</B></TD>
<TD width=75%>
<UL type="disc">
	<LI>设置和检索命令行参数</li>

	<LI>确定脚本文件的名称</li>

	<LI>确定宿主文件的名称（wscript.exe 或 cscript.exe）</li>

	<LI>确定宿主的版本信息</li>

	<LI>创建 COM 对象，与 COM 对象连接以及断开连接</li>

	<LI>接收事件</li>

	<LI>通过编程方式停止执行脚本</li>

	<LI>将信息输出到默认输出设备（例如，对话框或命令行）</li>
</UL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshArguments</B></TD>
<TD width=75%>访问整个命令行参数集</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshNamed</B></TD>
<TD width=75%>访问命令行的已命名参数集</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshUnnamed</B></TD>
<TD width=75%>访问命令行的未命名参数集。</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshNetwork</B></TD>
<TD width=75%>
<UL type="disc">
	<LI>与网络共享点和网络打印机连接以及断开连接</li>

	<LI>映射网络共享点以及取消其映射</li>

	<LI>访问有关当前登录用户的信息</li>
</UL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshController</B></TD>
<TD width=75%>使用 Controller 方法 CreateScript() 创建远程脚本过程</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshRemote</B></TD>
<TD width=75%>
<UL type="disc">
	<LI>远程管理计算机网络上的计算机系统</li>

	<LI>通过编程方式操纵其他程序/脚本</li>
</UL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshRemote Error</B></TD>
<TD width=75%>因脚本出错而导致远程脚本终止时，访问可用的错误信息</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshShell</B></TD>
<TD width=75%>
<UL type="disc">
	<LI>在本地运行程序</li>

	<LI>操纵注册表内容。</li>

	<LI>创建快捷方式</li>

	<LI>访问系统文件夹</li>

	<LI>操纵环境变量（如 WINDIR、PATH 或 PROMPT）</li>
</UL>
</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshShortcut</B></TD>
<TD width=75%>通过编程方式创建快捷方式</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshSpecialfolders</B></TD>
<TD width=75%>访问所有的 Windows 特殊文件夹</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshURLShortcut</B></TD>
<TD width=75%>通过编程方式创建 Internet 资源的快捷方式</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshEnvironment</B></TD>
<TD width=75%>访问所有环境变量（如 WINDIR、PATH 或 PROMPT）</TD>
</TR>

<TR VALIGN="top">
<TD width=25%><B>WshScriptExec</B></TD>
<TD width=75%>确定有关用 Exec() 运行的脚本的状态和错误信息
<P>访问 StdIn、StdOut 和 StdErr 通道</P>
</TD>
</TR>
</table></div>

<P>除 Windows 脚本宿主提供的对象界面外，管理员还可以使用任何展示自动化界面的 ActiveX 控件，在 Windows 平台上执行各种任务。例如，管理员可通过编写脚本来管理 Windows Active Directory 服务界面 (ADSI)。</P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
