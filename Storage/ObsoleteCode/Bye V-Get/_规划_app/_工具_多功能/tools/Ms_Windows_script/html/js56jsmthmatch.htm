<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>match 方法</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jsmthmatch"></A>match 方法</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>使用正则表达式模式对字符串执行查找，并将包含查找的结果作为数组返回。</P>

<PRE class="syntax">stringObj.<B>match(</B>rgExp<B>)</B> </PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>stringObj</I></DT>

<DD>必选项。对其进行查找的 <B>String</B> 对象或字符串文字。</dd>

<DT><I>rgExp</I></DT>

<DD>必选项。为包含正则表达式模式和可用标志的<B>正则表达式</B>对象。也可以是包含正则表达式模式和可用标志的变量名或字符串文字。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>如果 <B>match</B> 方法没有找到匹配，返回 <B>null</B>。如果找到匹配返回一个数组并且更新全局 <B>RegExp</B> 对象的属性以反映匹配结果。</P>

<P><B>match</B> 方法返回的数组有三个属性：<B>input</B>、<B>index </B>和 <B>lastIndex</B>。<B>Input</B> 属性包含整个的被查找字符串。<B>Index</B> 属性包含了在整个被查找字符串中匹配的子字符串的位置。<B>LastIndex</B> 属性包含了最后一次匹配中最后一个字符的下一个位置。</P>

<P>如果没有设置全局标志 (g)，数组的 0 元素包含整个匹配，而第 1 到 n 元素包含了匹配中曾出现过的任一个子匹配。这相当于没有设置全局标志的 <B>exec</B> 方法。如果设置了全局标志，元素 0 到 n 中包含所有匹配。</P>

<H4 class="dtH4">示例</H4>

<P>下面的示例演示了<B>match</B> 方法的用法：</P>

<PRE class="code">function MatchDemo(){
   var r, re;         // 声明变量。
   var s = "The rain in Spain falls mainly in the plain";
   re = /ain/i;    // 创建正则表达式模式。
   r = <code><b class="cfe">s.match(</b></code>re<code><b class="cfe">)</b></code>;   // 尝试匹配搜索字符串。
   return(r);         // 返回第一次出现 "ain" 的地方。
}</PRE>

<P>本示例说明带 <B>g</B> 标志设置的 match 方法的用法。</P>

<PRE class="code">function MatchDemo(){
   var r, re;         // 声明变量。
   var s = "The rain in Spain falls mainly in the plain";
   re = /ain/ig;      // 创建正则表达式模式。
   r = <code><b class="cfe">s.match(</b></code>re<code><b class="cfe">)</b></code>;   // 尝试去匹配搜索字符串。
   return(r);         // 返回的数组包含了所有 "ain" 
                      // 出现的四个匹配。
}</PRE>

<P>下面几行代码演示了字符串文字的 <B>match</B> 方法的用法。</P>

<PRE class="code">var r, re = "Spain";
r = <code><b class="cfe">"The rain in Spain".replace(</b></code>re<code><b class="cfe">,</b></code> "Canada"<code><b class="cfe">)</b></code>;</PRE>

<H4 class="dtH4">要求</H4>

<P><A HREF="js56jsoriversioninformation.htm">版本 3</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="js56jsmthexec.htm">exec 方法</A> | <A HREF="js56jsobjregexp.htm">RegExp 对象</A> | <A HREF="js56jsmthreplace.htm">replace 方法</A> | <A HREF="js56jsmthsearch.htm">search 方法</A> | <A HREF="js56jsobjstring.htm#js56jsobjstringmeth">String 对象的方法</A> | <A HREF="js56jsmthtest.htm">test 方法</A></P>

<P>应用于： <A HREF="js56jsobjstring.htm">String 对象</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
