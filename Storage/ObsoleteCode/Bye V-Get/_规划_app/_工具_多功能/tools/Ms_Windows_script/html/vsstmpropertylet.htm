<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>Property Let 语句</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>Visual&nbsp;Basic&nbsp;Scripting&nbsp;Edition</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="vsstmpropertylet"></A>Property Let 语句</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>在 <B>Class</B> 块中，声明名称、参数和代码等，它们构成了设置属性值的 <B>Property</B> 过程的主体。</P>

<PRE class="syntax"> [<B>Public</B> | <B>Private</B>] <B>Property Let</B> name <B>(</B>
<B>   </B>[<I>arglist</I>,] <I>value</I>
<B>)</B>
&nbsp;&nbsp;&nbsp;&nbsp;[statement]
&nbsp;&nbsp;&nbsp;&nbsp;[<B>Exit Property</B>] 
&nbsp;&nbsp;&nbsp;&nbsp;[statement]
<B>End Property</B> </PRE>

<H4 class="dtH4">参数</H4>

<DL>
<DT><I>Public</I></DT>

<DD>表明 <B>Property Let</B> 过程可以被所有脚本中的其他所有过程访问。</dd>

<DT><I>Private</I></DT>

<DD>表明 <B>Property Let</B> 过程只能被定义之的 <B>Class</B> 块内的其他过程访问。</dd>

<DT><I>name</I></DT>

<DD><B>Property Let</B> 过程的名称；遵守标准的变量命名规则，区别仅仅在于其名称可以与相同 <B>Class</B> 块中的 <B>Property Get</B> 或 <B>Property Set</B> 过程相同。</dd>

<DT><I>arglist</I></DT>

<DD>该变量列表代表了在调用时被传递到 <B>Property Let</B> 过程的参数。多个参数之间用逗号隔开。<B>Property Let</B> 过程的每个参数的名字必须与 <B>Property Get</B> 过程中的相应参数相同。此外， <B>Property Let</B> 过程的参数比相应的 <B>Property Get</B> 过程总要多一个。该参数为被赋予属性的值。</dd>

<DT><I>value</I></DT>

<DD>该变量中包含要赋予属性的值。当过程被调用时，该参数将出现在调用表达式的右侧。</dd>

<DT><I>statement</I></DT>

<DD>任意的一组语句，将在 <B>Property Let</B> 过程的主体内执行。</dd>
</DL>

<H4 class="dtH4">说明</H4>

<P>如果未明确地使用 Public 或 Private 进行指定，<B>Property Let</B> 过程被缺省设置为公有的，即它们对于脚本内的其他所有过程都是可见的。<B>Property Let</B>过程中的局部变量的值在不同的过程调用之间是不被保存的。</P>

<P>在其他任何过程（例如 Function 或 Property Get）的内部不能够定义 Property Let 过程。</P>

<P>Exit Property 语句将导致立即从 Property Let 过程中退出。程序将从调用 Property Let 过程的语句之后的点继续执行。Exit Property 语句可以出现在 Property Let 过程中的任何位置，次数不限。</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">注意&nbsp;&nbsp;&nbsp;</b>每个 <B>Property Let</B> 语句必须为所定义的过程至少定义一个参数。该参数（在存在多个参数时的最后一个参数）包含了当 <B>Property Let</B> 语句被调用时要赋予属性的值。该参数在前面的语法中称为<I>value</I>。</BLOCKQUOTE>

<P>与 <B>Function</B> 和 <B>Property Get</B> 过程类似，<B>Property Let</B> 过程是一个单独的过程，它可以接受参数，执行一系列的语句，还可以改变参数的值。不过，与<B>Function</B> 和 <B>Property Get</B> 过程不同的是，它们两者都返回一个值，而<B>Property Let</B>过程只能用于属性赋值表达式的左侧。</P>

<H4 class="dtH4">要求</H4>

<P><A HREF="vtoriversioninformation.htm">版本 5</A></P>

<H4 class="dtH4">请参阅</H4>

<P><A HREF="vsstmclass.htm">Class 语句</A> | <A HREF="vsstmdim.htm">Dim 语句</A> | <A HREF="vsstmexit.htm">Exit 语句</A> | <A HREF="vsstmfunction.htm">Function 语句</A> | <A HREF="vsstmprivate.htm">Private 语句</A> | <A HREF="vsstmpropertyget.htm">Property Get 语句</A> | <A HREF="vsstmpropertyset.htm">Property Set 语句</A> | <A HREF="vsstmpublic.htm">Public 语句</A> | <A HREF="vsstmset.htm">Set 语句</A> | <A HREF="vsstmsub.htm">Sub 语句</A></P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
