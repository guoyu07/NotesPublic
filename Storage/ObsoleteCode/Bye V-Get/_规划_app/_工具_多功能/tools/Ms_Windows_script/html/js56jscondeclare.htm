<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312">
<TITLE>JScript 的变量</TITLE>
<!--CSS_START-->
<SCRIPT SRC="../scripts/vs70.js"></SCRIPT>
<SCRIPT SRC="../scripts/vs70link.js"></SCRIPT>
<!--CSS_END--></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<!--NONSCROLLING BANNER START-->
<div id="nsbanner">
<div id="bannerrow1">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="runninghead" nowrap>JScript</TD>
<TD CLASS="product" nowrap>&nbsp;</TD>
</TR>
</TABLE>
</div>
<div id="TitleRow">
<H1 class="dtH1"><A NAME="js56jscondeclare"></A>JScript 变量</H1>
</div></div>
<!--NONSCROLLING BANNER END-->
<DIV id="nstext" valign="bottom">
<P>任何编程语言中，用一块数据量化一个概念。</P>

<PRE class="code">How old am I?</PRE>

<P>在 Jscript 中，变量是给概念的名称；它代表了给出瞬间的值。当使用该变量时，实际是用的它所代表的数据。给出示例：</P>

<PRE class="code">NumberOfDaysLeft = EndDate &#0150; TodaysDate;</PRE>

<P>机械的理解是使用变量来存储、得到并操作脚本中出现的所有的不同值。创建有意义的变量名称；便于别人理解脚本。</P>

<H2 class="dtH2">变量声明</H2>

<P>变量在脚本中的第一次出现是在声明中。变量在第一次用到时就设置于内存中，便于后来在脚本中引用。使用变量之前先进行声明。可以使用 <B>var</B> 关键字来进行变量声明。</P>

<PRE class="code">var count;  // 单个声明。
var count, amount, level;  // 用单个 var 关键字声明的多个声明。
var count = 0, amount = 100;  // 一条语句中的变量声明和初始化。</PRE>

<P>如果在 <B>var </B>语句中没有初始化变量，变量自动取 JScript 值 <B>undefined</B>。尽管并不安全，但声明语句中忽略 <B>var</B> 关键字是合法的 JScript 语法。这时，JScript 解释器给予变量全局范围的可见度。当在过程级中声明一个变量时，它不能用于全局范围；这种情况下，变量声明<U>必须</U>用 <B>var</B> 关键字。</P>

<H2 class="dtH2">变量命名</H2>

<P>变量名称是一个标识符。Jscript 中，用标识符来：

<UL type="disc">
	<LI>命名变量，</li>

	<LI>命名函数，</li>

	<LI>给出循环的标签。</li>
</UL>

<P>JScript 是一种区分大小写的语言。因此变量名称 <I>myCounter </I>和变量名称 <I>mYCounter</I> 是不一样的。变量的名称可以是任意长度。创建合法的变量名称应遵循如下规则：

<UL type="disc">
	<LI>第一个字符必须是一个 ASCII 字母（大小写均可），或一个下划线 (_)。注意第一个字符不能是数字。</li>

	<LI>后续的字符必须是字母、数字或下划线。</li>

	<LI>变量名称一定不能是<A HREF="js56jsconreserved.htm">保留字</A>。</li>
</UL>

<P>下面给出合法变量名称的一些示例： </P>

<PRE class="code">_pagecount 
Part9 
Number_Items </PRE>

<P>下面给出无效变量名称的一些示例： </P>

<PRE class="code">99Balloons // 不能以数字开头。
Smith&amp;Wesson // “与”符号（&amp;）字符用于变量名称是无效的。</PRE>

<P>当要声明一个变量并进行初始化，但又不想指定任何特殊值，可以赋值为 JScript 值 null。下面给出示例。</P>

<PRE class="code">var bestAge = null;
var muchTooOld = 3 * bestAge; // muchTooOld 的值为 0。</PRE>

<P>如果声明了一个变量但没有对其赋值，该变量存在，其值为未定义的 Jscript 值。下面给出示例。</P>

<PRE class="code">var currentCount;
var finalCount = 1 * currentCount; // finalCount 的值为 NaN，因为 currentCount 为 undefined。</PRE>

<P>注意在 JScript 中 <B>null</B> 和 <B>undefined</B> 的主要区别是 <B>null</B> 的操作象数字 0，而 <B>undefined</B> 的操作象特殊值 <B>NaN</B> （不是一个数字）。对 <B>null</B> 值和 <B>undefined</B> 值作比较总是相等的。</P>

<P>可以不用 <B>var </B>关键字声明变量，并赋值。这就是隐式声明。</P>

<PRE class="code">noStringAtAll = ""; // 隐式声明变量 noStringAtAll。</PRE>

<P>不能使用未经过声明的变量。</P>

<PRE class="code">var volume = length * width; // 错误 &#0151; length 和 width 并不存在。</PRE>

<H2 class="dtH2">强制转换</H2>

<P>表达式中操作项的数据类型相同时 JScript 解释器才能对其求值。如果表达式不经过强制转换就试图对两个不同的数据类型（如一个为数字，另一个为字符串）执行运算，将产生错误结果。但在 Jscript 中情况就不同了。</P>

<P>JScript 是一种自由类型的语言。它的变量没有预定类型（相对于强类型语言，如 C++）。相反，JScript 变量的类型相应于他们包含的值的类型。这种操作的好处是能将值作为另一类型处理。</P>

<P>在 Jscript 中，可以对不同类型的值执行运算，不必担心 JScript 解释器产生异常。相反，JScript 解释器自动将数据类型之一改变（强制转换）为另一种数据类型，然后执行运算。例如：</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=43%>运算</TH>
<TH width=57%>结果</TH>
</TR>

<TR VALIGN="top">
<TD width=43%>数值与字符串相加</TD>
<TD width=57%>将数值强制转换为字符串。</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>布尔值与字符串相加</TD>
<TD width=57%>将布尔值强制转换为字符串。</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>数值与布尔值相加</TD>
<TD width=57%>将布尔值强制转换为数值。</TD>
</TR>
</table></div>

<P>考虑下面的示例。</P>

<PRE class="code">var x = 2000;      // 一个数字。
var y = "Hello";   // 一个字符串。
x = x + y;         // 将数字强制转换为字符串。
document.write(x); // 输出 2000Hello。</PRE>

<P>要想显式地将字符串转换为整数，使用 <A HREF="js56jsmthparseint.htm">parseInt 方法</A>。要想显式地将字符串转换为数字，使用 <A HREF="js56jsmthparsefloat.htm">parseFloat 方法</A>。请注意，比较大小时字符串自动转换为相等的数字，但加法（连接）运算时保留为字符串。</P>
<!--Footer Start-->
<DIV CLASS="footer">
<br>
<HR><!--Copyright-->
<p>&copy; 2001 Microsoft Corporation. 保留所有权利。</p></div> <!--Closes the footer div-->
</div> <!--closes the topic content div-->
<!--FOOTER_END-->
</BODY>
</HTML>
