<html>
<head>
<title>为什么开发人员对XML感到激动</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">

<link rel = stylesheet href = "image/style.css">
</head>
<body bgcolor="#ffffff">
<table width="688" border="0" cellspacing="0" cellpadding="0" align="center">
  <tr bgcolor="EEEEEE"> 
    <td height="22"><a href="index.htm">主页</a></td>
  </tr>
</table><br>
<table border="0" cellpadding="0" cellspacing="0" width="688" align="center" height="490">
  <tr valign="top"> 
    <td rowspan="4" width="91">&nbsp; </td>
    <td height="68" width="131"> 
      <p><img src="image/doc.gif"></p>
    </td>
    <td rowspan="4" width="18"><b></b> </td>
    <td height="68" width="387"><img src="image/title_doc.gif"></td>
    <td rowspan="4" width="61"> 
      <h6>&nbsp;</h6>
    </td>
  </tr>
  <tr valign="top"> 
    <td rowspan="3" valign="top" class="pt10" align="center" width="131" bgcolor="EEEEEE"> 
      <p>&nbsp;</p>
      <p><font color="#FF0000">※ 1.2 为什么开发人员对XML感到激动</font></p>
       
	</td>
  </tr>
  <tr valign="top"> 
    <td width="387" height="308"> 
      <table width="100%" border="0" cellpadding="0">
        <tr> 
          <td>

           <h4 ALIGN="CENTER">1.2 为什么开发人员对XML感到激动</h4>
<P>XML使许多只利用HTML难以解决的任务变得简单，使只利用HTML不可能完成的任务得以完成。因为XML是可扩展的，开发人员喜爱XML有许多原因。到底是哪个更令人感兴趣，取决于每个人的需要。但有一点是肯定的，一旦用上XML，就可发现，它正是解决许多令人感到棘手的问题的有力工具。本节研究一些令开发人员激动的一般应用。在第2章中，还会看到已经用XML开发出来的一些特殊应用。</P>
<h5>1.2.1 设计与特定领域有关的标记语言</h5>
<P>XML允许各种不同的专业（如音乐、化学、数学等）开发与自己的特定领域有关的标记语言。这就使得该领域中的人们可以交换笔记、数据和信息，而不用担心接收端的人是否有特定的软件来创建数据。特定领域的开发人员甚至可以向本领域外的人发送文档，有相当的理由可以认为，至少接受文档的人能够查看文档的内容。</P>
<P>更进一步说，为特别的领域创建标记语言不会产生“病件”（bloatware）或是对于本专业外的人来说产生不必要的复杂性。一般人也许不会对电力工程图感兴趣，但是电力工程师却对此感兴趣。一般人也许不需要在他的Web页面中包括乐谱，但是作曲家却要这样做。XML让电力工程师描述他们的电路图，让作曲家写乐谱，而不会互相干扰。对于浏览器开发商来说，都不需要对特定的领域提供特殊的支持，也不需要提供复杂的插件。这一点现在已经实现了。</P>
<h5>1.2.2 自描述数据</h5>
<P>过去40年来的大多数计算机数据都丢失了，不是因为自然损害或是备份介质的磨损（虽然这也是一个问题，这个问题在XML中也没有解决），而只是因为没有人来写出如何读取这些数据介质和格式的文档。在十年前的5.25英寸的软盘上的Lotus 1-2-3文档在今天的大多数公司内都已经读不出来了。以不常用的格式保存的二进制数据，如Lotus Jazz 也许会永远地消失了。XML在基本水平上使用的是非常简单的数据格式。可以用100％的纯ASCII文本来书写，也可以用几种其他定义好的格式来书写。ASCII文本是几乎不会“磨损”的。丢失一些字节甚至是相当多的字节，剩下的数据还是可以读取的。这就与许多格式形成了鲜明的对比，如压缩数据或是串行的Java对象，这些数据即使丢失一个字节，剩余的数据也变得不可读取了。</P>
<P>从高水平上来说，XML是自描述的。假设在23世纪有一个信息考古学者，他在软盘上发现了如下一大段经过时间的“冲刷”而保存下来的XML代码：</P>
<P><font face="Courier New, Courier, mono"><i>&lt;PERSON ID="p1100" SEX="M"&gt;</i></font></P>
<P> <i><font face="Courier New, Courier, mono">&lt;NAME&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;GIVEN&gt;Judson&lt;/GIVEN&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;SURNAME&gt; McDaniel&lt;/SURNAME&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;/NAME&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;BIRTH&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;DATE&gt;2 Feb 1834&lt;/DATE&gt; 
  &lt;/BIRTH&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;DEATH&gt;</font></i></P>
<P> <i><font face="Courier New, Courier, mono">&lt;DATE&gt;9 Dec 1905&lt;/DATE&gt; 
  &lt;/DEATH&gt;</font></i></P>
<P><i><font face="Courier New, Courier, mono">&lt;/PERSON&gt;</font></i></P>
<P>即使这个考古学家不熟悉XML，但假设他可以讲20世纪时的英语，那么就可以很好地了解名为Judson McDaniel的人，此人出生在1834年2月21日，而死于1905年12月9日。事实上，数据中有一些空白或是损坏，还是可以得到这些信息。但对于专有格式的电子表格或是字处理程序的格式，就不是这么回事了。</P>
<P>更进一步说，XML有很好的规格文档。W3C的XML 1.0 规范和大量的论文书籍，如本书，都向人们准确地说明如何来阅读XML数据。没有什么秘密使得人们发生失误。</P>
<h5>1.2.3 应用间交换数据</h5>
<P>由于XML是非专有的并易于阅读和编写，就使得它成为在不同的应用间交换数据的理想格式。当前正在开发的一种这样的格式是Open Financial Exchange（开放财务交换，简写为OFX）格式。OFX是为个人财务程序，如Microsoft Money和Quicken交换数据而设计的。数据可以在程序间来回交换，还可以与银行、经纪事务所和其他机构交换数据。</P>
<P><img src="image/Image4.gif" WIDTH=45 HEIGHT=33>有关OFX的内容将在第2章加以讨论。</P>
<P>正如上面所讨论的一样，XML使用的是非专有的格式，不受版权、专利、商业秘密或是其他种类的知识产权的限制。XML的功能是非常强大的，同时对于人类或是计算机程序来说，都容易阅读和编写。因而成为交换语言的首选。</P>
<P>使用XML而不是专有格式，人们就可以利用任何理解XML的工具来处理数据。还可以为不同的目的使用不同的工具。一个程序用来查看而另一程序用来编辑。XML使用户不必因为数据已经用专有格式编写好了或是接受数据的人只接受专有格式而限制在一个特定的程序上。</P>
<P>例如，许多出版商需要用Microsoft Word发稿。这就意味着大多数作者必须使用Word，即使他们更愿意使用WordPerfect或是Nisus Writer。因而这就使得其他出版字处理软件的公司陷入困境，除非他们的软件能够读写Word文件。由于要想达到这个目的，就得让开发人员反向了解未载入文档的Word文件格式，这使得在时间和资源上的投资大增。大多数其他字处理软件具有有限的读写Word文件的能力，但是通常都会丢失图形、宏、样式、修订标记和其他重要的特性。问题就在于Word文档的格式是不公开的专有格式，而且还在不断地变化。这样Word就成为最后的胜利者，即使作者更喜爱其他的更简单的程序。如果在XML中开发了一种通用的字处理格式，作者们就会使这个程序成为他们的首选程序。</P>
<h5>1.2.4 结构化和集成的数据</h5>
<P>XML对于大型和复杂的文档是理想的，因为数据是结构化的。这不仅使用户可以指定一个定义了文档中的元素的词汇表，而且还可以指定元素之间的关系。例如，如果要将销售客户的地址一起放在Web页面上，这就需要有每个客户的电话号码和电子邮件地址。如果向数据库中输入数据，可确保没有漏下的字段。还需要每部书都有一个作者。当没有数据输入时还可提供一个缺省值。XML也提供客户端的包括机制，可以根据多种来源集成数据并将其作为一个文档来显示。数据还可以马上进行重新排列。数据的各个部分可以根据用户的操作显示或隐藏。当处理大型的信息仓库，比如关系型数据库时是极为有用的。</P> 
<a href='305.htm'>&lt;&lt;上一篇</a>&nbsp;&nbsp;<a href='307.htm'>下一篇&gt;&gt;</a></td>
        </tr>
      </table>
      <p>&nbsp; </p>
    </td>
  </tr>
</table>

</body>

</html>
