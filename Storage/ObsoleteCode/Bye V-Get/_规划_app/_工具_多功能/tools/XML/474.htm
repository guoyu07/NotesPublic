<html>
<head>
<title>何为XSL</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">

<link rel = stylesheet href = "image/style.css">
</head>
<body bgcolor="#ffffff">
<table width="688" border="0" cellspacing="0" cellpadding="0" align="center">
  <tr bgcolor="EEEEEE"> 
    <td height="22"><a href="index.htm">主页</a></td>
  </tr>
</table><br>
<table border="0" cellpadding="0" cellspacing="0" width="688" align="center" height="490">
  <tr valign="top"> 
    <td rowspan="4" width="91">&nbsp; </td>
    <td height="68" width="131"> 
      <p><img src="image/doc.gif"></p>
    </td>
    <td rowspan="4" width="18"><b></b> </td>
    <td height="68" width="387"><img src="image/title_doc.gif"></td>
    <td rowspan="4" width="61"> 
      <h6>&nbsp;</h6>
    </td>
  </tr>
  <tr valign="top"> 
    <td rowspan="3" valign="top" class="pt10" align="center" width="131" bgcolor="EEEEEE"> 
      <p>&nbsp;</p>
      <p><font color="#FF0000">※ 14.1 何为XSL？</font></p>
       
	</td>
  </tr>
  <tr valign="top"> 
    <td width="387" height="308"> 
      <table width="100%" border="0" cellpadding="0">
        <tr> 
          <td>

<h4><a name="_Toc467207132">14.1 何为XSL？</a></h4>
<p>变换和格式两部分可相互独立地起作用。例如，变换语言可将XML文档变换成结构整洁的HTML文件，并且完全忽略XSL格式化对象。Internet Explorer 
  5.0支持这种XSL样式，这在第5章已讨论过，本章着重讨论这种样式。</p>
<p>此外，以XSL格式化对象编写的文档，并非绝对要求在另一个XML文档上使用XSL变换部分才能产生。例如，很容易想象到这样的一个转换器：它是用Java语言写成的，可读取TeX或PDF文件，并把这些文件翻译成XSL格式化对象（尽管直到1999年夏天仍没有这样的一种转换器存在）。</p>
<p>实际上，XSL是两种语言，而不是一种。第一种语言是变换语言，第二种是格式化语言。变换语言是一种很有用的语言，它与格式化语言无关。它能够把数据从一种XML表示移到另一种表示，这种功能，使它成为基于XML的电子商务、电子数据交换、元数据交换以及应用于需要在相同数据的不同XML表示之间进行转换的重要组成部分。由于缺乏对人们要浏览的显示器上显示数据的了解，这些用途还要结合起来使用。它们纯粹是用来将数据从一种计算机系统或程序移到另一种计算机系统或程序中。</p>
<p>因此，许多早期的XSL实现都毫无例外地将焦点集中在变换部分，而忽略了格式化对象。这些是不完善的实施方案，但仍然是很有用的。并非所有的数据最终都必须显示在计算机显示器上或打印到纸上。</p>
<p><img src="Image/BK000214-19.gif" width=57 height=41 align="left">第15章“XSL格式化对象”将涉及XSL格式化语言。</p>
<b> 
<p>&nbsp;</p>
<p>有关XSL警告语</p>
</b>
<p>XSL仍然处于开发中。XSL语言在过去发生了根本性的变化，将来肯定会再发生变化。本章是根据1999年4月21日的XSL规范草案（第四稿）写成的。读者阅读此书时，此XSL草案可能已经被取代了，精确的XSL句法将会变化。我希望本章与实际的规范不会相差太大。但是，如果的确有不一致的地方，应将本书中的例子与最新规范进行对比。</p>
<p>糟糕的是，仍然没有任何软件能实现1999年4月21日的XSL规范草案（第四稿）的所有内容，甚至不能实现XSL变换的部分。现有的所有产品只能实现当前草案的不同子集。而且，许多产品（包括Internet 
  Explorer 5.0和XT）加入的元素并没有出现在当前XSL草案规范中。最后一点是，大多数至少要实现部分XSL内容的产品在其可实现的部分中也存在着很严重的程序错误（bug）。因此，在不同的软件中，只有廖廖无几的几个例子能准确地以相同的方式工作。</p>
<p>当然，随着此项标准向最后版本改进时，当开发商解决了自己产品中的程序错误并实现没有被实现的内容时，以及当出版的更多软件支持XSL时，最终这种情况是可以得到修正的。在达到此目的之前，还得面对这样的选择：要么忍痛使用目前不完善的、未完成的XSL，并且试图避开遇到的所有程序错误和疏忽，要么使用更确定的技术（如CSS），直到XSL更加可靠为止。</p>
 
<a href='473.htm'>&lt;&lt;上一篇</a>&nbsp;&nbsp;<a href='475.htm'>下一篇&gt;&gt;</a></td>
        </tr>
      </table>
      <p>&nbsp; </p>
    </td>
  </tr>
</table>

</body>

</html>
