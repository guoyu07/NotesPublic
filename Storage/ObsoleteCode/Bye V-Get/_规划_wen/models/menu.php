<?php/*+--------------------------------------------------------------------------|   Anwsion [#RELEASE_VERSION#]|   ========================================|   by Anwsion dev team|   (c) 2011 - 2012 Anwsion Software|   http://www.anwsion.com|   ========================================|   Support: zhengqiang@gmail.com|   +---------------------------------------------------------------------------*/if (!defined('IN_ANWSION')){	die;}class menu_class extends AWS_MODEL{		function add_nav_menu($title, $description, $type = 'custom', $type_id = 0, $link = null)	{		$data = array(			'title' => $title, 			'description' => $description, 			'type' => $type, 			'type_id' => $type_id, 			'link' => $link, 			'icon' => '', 			'sort' => 99, 		);				AWS_APP::cache()->cleanGroup('nav_menu');				return $this->insert('nav_menu', $data);	}		function get_nav_menu_list($where = null, $with_feature = false, $with_category = false)	{		if (!$nav_menu = AWS_APP::cache()->get('nav_menu_' . md5($where . $with_feature . $with_category)))		{			if ($nav_menu = $this->fetch_all('nav_menu', $where, 'sort ASC'))			{				$category_ids = array();								foreach($nav_menu as $key => $val)				{					if ($val['type'] == 'category')					{						$category_ids[] = $val['type_id'];					}					else if ($val['type'] == 'feature')					{						$feature_ids[] = $val['type_id'];					}				}								$category_info = $this->model('system')->get_category_list('question');								$feature_info = $this->model('feature')->get_feature_by_id($feature_ids);								foreach($nav_menu as $key => $val)				{					switch($val['type'])					{						case 'category' :														$nav_menu[$key]['link'] = 'home/explore/category-' . $category_info[$val['type_id']]['url_token'];							$nav_menu[$key]['child'] = $this->model('system')->fetch_category('question', $val['type_id']);						break;												case 'feature' :														$nav_menu[$key]['link'] = 'feature/' . $feature_info[$val['type_id']]['url_token'];						break;					}										if ($with_feature && ($val['type'] == 'feature'))					{						$nav_menu['feature_ids'][] = $val['type_id'];					}										if ($with_category && ($val['type'] == 'category'))					{						$nav_menu['category_ids'][] = $val['type_id'];					}				}								AWS_APP::cache()->set('nav_menu_' . md5($where . $with_feature . $with_category), $nav_menu, get_setting('cache_level_low'), 'nav_menu');			}		}					if ($nav_menu)		{			return $nav_menu;		}		else		{			return array();		}	}		function update_nav_menu($nav_menu_id, $data)	{		$this->update('nav_menu', $data, 'id = ' . intval($nav_menu_id));				AWS_APP::cache()->cleanGroup('nav_menu');				return true;	}		function remove_nav_menu($nav_menu_id)	{		$this->delete('nav_menu', 'id = ' . intval($nav_menu_id));				AWS_APP::cache()->cleanGroup('nav_menu');				return true;	}}