//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Tf.Sso.Sign_signIn_args = function(args) {
  this.sign_in_st = null;
  if (args) {
    if (args.sign_in_st !== undefined) {
      this.sign_in_st = args.sign_in_st;
    }
  }
};
Tf.Sso.Sign_signIn_args.prototype = {};
Tf.Sso.Sign_signIn_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sign_in_st = new Tf.Sso.SignInSt();
        this.sign_in_st.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_signIn_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_signIn_args');
  if (this.sign_in_st !== null && this.sign_in_st !== undefined) {
    output.writeFieldBegin('sign_in_st', Thrift.Type.STRUCT, 1);
    this.sign_in_st.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_signIn_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_signIn_result.prototype = {};
Tf.Sso.Sign_signIn_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Tf.Sso.SignInfoSt();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_signIn_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_signIn_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_signOut_args = function(args) {
};
Tf.Sso.Sign_signOut_args.prototype = {};
Tf.Sso.Sign_signOut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_signOut_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_signOut_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_signOut_result = function(args) {
};
Tf.Sso.Sign_signOut_result.prototype = {};
Tf.Sso.Sign_signOut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_signOut_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_signOut_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_isAccountValid_args = function(args) {
  this.account = null;
  this.account_type = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.account_type !== undefined) {
      this.account_type = args.account_type;
    }
  }
};
Tf.Sso.Sign_isAccountValid_args.prototype = {};
Tf.Sso.Sign_isAccountValid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.account_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_isAccountValid_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_isAccountValid_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.account_type !== null && this.account_type !== undefined) {
    output.writeFieldBegin('account_type', Thrift.Type.I32, 2);
    output.writeI32(this.account_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_isAccountValid_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_isAccountValid_result.prototype = {};
Tf.Sso.Sign_isAccountValid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_isAccountValid_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_isAccountValid_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_sendVericodeForSignUp_args = function(args) {
  this.account = null;
  this.account_type = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.account_type !== undefined) {
      this.account_type = args.account_type;
    }
  }
};
Tf.Sso.Sign_sendVericodeForSignUp_args.prototype = {};
Tf.Sso.Sign_sendVericodeForSignUp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.account_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_sendVericodeForSignUp_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_sendVericodeForSignUp_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.account_type !== null && this.account_type !== undefined) {
    output.writeFieldBegin('account_type', Thrift.Type.I32, 2);
    output.writeI32(this.account_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_sendVericodeForSignUp_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_sendVericodeForSignUp_result.prototype = {};
Tf.Sso.Sign_sendVericodeForSignUp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_sendVericodeForSignUp_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_sendVericodeForSignUp_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_sendVericode_args = function(args) {
  this.account = null;
  this.account_type = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.account_type !== undefined) {
      this.account_type = args.account_type;
    }
  }
};
Tf.Sso.Sign_sendVericode_args.prototype = {};
Tf.Sso.Sign_sendVericode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.account_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_sendVericode_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_sendVericode_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.account_type !== null && this.account_type !== undefined) {
    output.writeFieldBegin('account_type', Thrift.Type.I32, 2);
    output.writeI32(this.account_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_sendVericode_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_sendVericode_result.prototype = {};
Tf.Sso.Sign_sendVericode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_sendVericode_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_sendVericode_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_verify_args = function(args) {
  this.vericode = null;
  if (args) {
    if (args.vericode !== undefined) {
      this.vericode = args.vericode;
    }
  }
};
Tf.Sso.Sign_verify_args.prototype = {};
Tf.Sso.Sign_verify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.vericode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_verify_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_verify_args');
  if (this.vericode !== null && this.vericode !== undefined) {
    output.writeFieldBegin('vericode', Thrift.Type.STRING, 1);
    output.writeString(this.vericode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_verify_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_verify_result.prototype = {};
Tf.Sso.Sign_verify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_verify_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_verify_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_initPwd_args = function(args) {
  this.pwd = null;
  if (args) {
    if (args.pwd !== undefined) {
      this.pwd = args.pwd;
    }
  }
};
Tf.Sso.Sign_initPwd_args.prototype = {};
Tf.Sso.Sign_initPwd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_initPwd_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_initPwd_args');
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 1);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_initPwd_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_initPwd_result.prototype = {};
Tf.Sso.Sign_initPwd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_initPwd_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_initPwd_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_bind_args = function(args) {
  this.account = null;
  this.account_type = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.account_type !== undefined) {
      this.account_type = args.account_type;
    }
  }
};
Tf.Sso.Sign_bind_args.prototype = {};
Tf.Sso.Sign_bind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.account_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_bind_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_bind_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.account_type !== null && this.account_type !== undefined) {
    output.writeFieldBegin('account_type', Thrift.Type.I32, 2);
    output.writeI32(this.account_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_bind_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_bind_result.prototype = {};
Tf.Sso.Sign_bind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_bind_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_bind_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_unbind_args = function(args) {
  this.account = null;
  this.account_type = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.account_type !== undefined) {
      this.account_type = args.account_type;
    }
  }
};
Tf.Sso.Sign_unbind_args.prototype = {};
Tf.Sso.Sign_unbind_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.account_type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_unbind_args.prototype.write = function(output) {
  output.writeStructBegin('Sign_unbind_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.account_type !== null && this.account_type !== undefined) {
    output.writeFieldBegin('account_type', Thrift.Type.I32, 2);
    output.writeI32(this.account_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.Sign_unbind_result = function(args) {
  this.err = null;
  if (args instanceof Tf.Sso.Err) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
  }
};
Tf.Sso.Sign_unbind_result.prototype = {};
Tf.Sso.Sign_unbind_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new Tf.Sso.Err();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tf.Sso.Sign_unbind_result.prototype.write = function(output) {
  output.writeStructBegin('Sign_unbind_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tf.Sso.SignClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Tf.Sso.SignClient.prototype = {};
Tf.Sso.SignClient.prototype.signIn = function(sign_in_st) {
  this.send_signIn(sign_in_st);
  return this.recv_signIn();
};

Tf.Sso.SignClient.prototype.send_signIn = function(sign_in_st) {
  this.output.writeMessageBegin('signIn', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_signIn_args();
  args.sign_in_st = sign_in_st;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_signIn = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_signIn_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'signIn failed: unknown result';
};
Tf.Sso.SignClient.prototype.signOut = function() {
  this.send_signOut();
};

Tf.Sso.SignClient.prototype.send_signOut = function() {
  this.output.writeMessageBegin('signOut', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_signOut_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
Tf.Sso.SignClient.prototype.isAccountValid = function(account, account_type) {
  this.send_isAccountValid(account, account_type);
  this.recv_isAccountValid();
};

Tf.Sso.SignClient.prototype.send_isAccountValid = function(account, account_type) {
  this.output.writeMessageBegin('isAccountValid', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_isAccountValid_args();
  args.account = account;
  args.account_type = account_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_isAccountValid = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_isAccountValid_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
Tf.Sso.SignClient.prototype.sendVericodeForSignUp = function(account, account_type) {
  this.send_sendVericodeForSignUp(account, account_type);
  this.recv_sendVericodeForSignUp();
};

Tf.Sso.SignClient.prototype.send_sendVericodeForSignUp = function(account, account_type) {
  this.output.writeMessageBegin('sendVericodeForSignUp', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_sendVericodeForSignUp_args();
  args.account = account;
  args.account_type = account_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_sendVericodeForSignUp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_sendVericodeForSignUp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
Tf.Sso.SignClient.prototype.sendVericode = function(account, account_type) {
  this.send_sendVericode(account, account_type);
  this.recv_sendVericode();
};

Tf.Sso.SignClient.prototype.send_sendVericode = function(account, account_type) {
  this.output.writeMessageBegin('sendVericode', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_sendVericode_args();
  args.account = account;
  args.account_type = account_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_sendVericode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_sendVericode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
Tf.Sso.SignClient.prototype.verify = function(vericode) {
  this.send_verify(vericode);
  this.recv_verify();
};

Tf.Sso.SignClient.prototype.send_verify = function(vericode) {
  this.output.writeMessageBegin('verify', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_verify_args();
  args.vericode = vericode;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_verify = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_verify_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
Tf.Sso.SignClient.prototype.initPwd = function(pwd) {
  this.send_initPwd(pwd);
  this.recv_initPwd();
};

Tf.Sso.SignClient.prototype.send_initPwd = function(pwd) {
  this.output.writeMessageBegin('initPwd', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_initPwd_args();
  args.pwd = pwd;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_initPwd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_initPwd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
Tf.Sso.SignClient.prototype.bind = function(account, account_type) {
  this.send_bind(account, account_type);
  this.recv_bind();
};

Tf.Sso.SignClient.prototype.send_bind = function(account, account_type) {
  this.output.writeMessageBegin('bind', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_bind_args();
  args.account = account;
  args.account_type = account_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_bind = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_bind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
Tf.Sso.SignClient.prototype.unbind = function(account, account_type) {
  this.send_unbind(account, account_type);
  this.recv_unbind();
};

Tf.Sso.SignClient.prototype.send_unbind = function(account, account_type) {
  this.output.writeMessageBegin('unbind', Thrift.MessageType.CALL, this.seqid);
  var args = new Tf.Sso.Sign_unbind_args();
  args.account = account;
  args.account_type = account_type;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

Tf.Sso.SignClient.prototype.recv_unbind = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Tf.Sso.Sign_unbind_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.err) {
    throw result.err;
  }
  return;
};
