/! <MODULE>.cpp !/

/. zend_function_entry./
const zend_function_entry <MODULE>_functions[] = {
    /**
     * PHP FUNCTION EXTENSION
     * use PHP_FUNCTION(<PHP_FUNCTION>) to write code
     */
    PHP_FE(<PHP_FUNCTION>, NULL)
    /**
     * PHP METHOD
     * use PHP_METHOD(<CLASS>, <METHOD>) to write code
     * @param ZEND_ACC_CTOR   :  a constructor function
     * @param ZEND_ACC_DTOR   :  a de-constructor function
     * @param ZEND_ACC_PUBLIC :  the privilege is public
     */
    PHP_ME(<CLASS>, __construct, arg_construct, ZEND_ACC_CTOR|ZEND_ACC_PUBLIC)
    PHP_ME(<CLASS>, clone, NULL, ZEND_ACC_PUBLIC)
    PHP_ME(<CLASS>, <METHOD), NULL, ZEND_ACC_PUBLIC)
    PHP_FE_END
};


/.  ./ 
在Zend Engine 2 (PHP5+)中，arginfo的数据是由多个zend_arg_info结构体构成的数组，数组的每一个成员即每一个zend_arg_info结构体处理函数的一个参数。zend_arg_info结构体的定义如下：
typedef struct _zend_arg_info {
    const char *name;                /* 参数的名称*/
    zend_uint name_len;                /* 参数名称的长度*/
    const char *class_name;            /* 类名 */
    zend_uint class_name_len;        /* 类名长度*/
    zend_bool array_type_hint;        /* 数组类型提示 */
    zend_bool allow_null;            /* 是否允许为NULL　*/
    zend_bool pass_by_reference;    /* 是否引用传递 */
    zend_bool return_reference;        /* 返回值是否为引用形式 */ 
    int required_num_args;          /* 必要参数的数量 */
} zend_arg_info;

生成zend_arg_info结构的数组比较繁琐，为了方便PHP扩展开发者，内核已经准备好了相应的宏来专门处理此问题，首先先用一个宏函数来生成头部，然后用第二个宏生成具体的数据，最后用一个宏生成尾部代码。

ZEND_ARG_PASS_INFO(by_ref)
//强制所有参数使用引用的方式传递

ZEND_ARG_INFO(by_ref, name)
//如果by_ref为1，则名称为name的参数必须以引用的方式传递，

ZEND_ARG_ARRAY_INFO(by_ref, name, allow_null)
ZEND_ARG_OBJ_INFO(by_ref, name, classname, allow_null)
这两个宏实现了类型绑定，也就是说我们在传递某个参数时，必须是数组类型或者某个类的实例。如果最后的参数为真，则除了绑定的数据类型，还可以传递一个NULL数据。

//我们组合起来使用：
ZEND_BEGIN_ARG_INFO(byref_compiletime_arginfo, 0)
    ZEND_ARG_PASS_INFO(1)
ZEND_END_ARG_INFO()



/**
 *initial function when Zend Engine loads this module
 *@struct zend_class_entry : structure of zend
 */
zend_class_entry *<ClassSt_p>;
PHP_MINIT_FUNCTION(){
    zend_class_entry <ClassSt>;
    INIT_CLASS_ENTRY(<ClassSt>, "<CLASS>"， class_ext_function);
    /* register a class */
    <ClassSt_p> = zend_register_internal_class_ex(&<ClassSt>, NULL, NULL, TSRMLS_CC);
    /**
     * initial a private variable to a value   
     * e.g.  private $_wight;
     *       _construct($wight){ $this->_wight = $wight; }
     */
    zend_declare_property_null( <ClassSt_p>, 
                                ZEND_STRL("<VAR_OF_CLASS>"), 
                                ZEND_ACC_PRIVATE TSRMLS_CC
                                );
    return SUCCESS;                    
}


/**
 * set a method to value <VALUE>
 * class->$var = 100;
 */
zend_update_property_long(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("<ClassMethod>"), <VALUE> TSRMLS_CC);

/**
 *
 * @return value
 */
zend_read_property(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("<ClassMethod>"), 0 TSRMLS_CC); 



/**
 * a method, e.g.  class->method();
 */
PHP_METHOD(<CLASS>, <METHOD){
}

/**
 * a _constructor function
 */
PHP_METHOD(<CLASS>, __construct){
    char * sediment;
    int sed_len;
    int thickness;
    if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sl", &sediment, &sed_len, &thickness) == FAILURE){
        WRONG_PARAM_COUNT;
    }
    zend_update_property_long(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("_sendiment"), sediment TSRMLS_CC);
    zend_update_property_long(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("_thickness"), thickness TSRMLS_CC);
    RETURN_TURE;
}
/**
 * a clone function
 */
PHP_METHOD(<CLASS>, clone){
    zval *clone_obj; 
    zval *width,*height; 
    MAKE_STD_ZVAL(clone_obj); 
    /**
     * initial object
     */
    object_init_ex(clone_obj, <ClassSt_p>);
    
    width = zend_read_property(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("_width"), 0 TSRMLS_CC); //获取类成员变量_width的值 
    height = zend_read_property(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("_height"), 0 TSRMLS_CC); //获取类成员变量_height的值 
    zend_update_property_long(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("_width"), width TSRMLS_CC); //更新Rectangle_ce类对象clone_obj的属性值_width 
    zend_update_property_long(Z_OBJCE_P(getThis()), getThis(), ZEND_STRL("_height"), height TSRMLS_CC); //更新Rectangle_ce类对象clone_obj的属性值_height 
    RETURN_ZVAL(clone_obj, 1, 0);  //返回该对象 
}












