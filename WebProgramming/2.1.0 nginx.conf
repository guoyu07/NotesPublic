# @see http://nginx.org/en/docs/http/ngx_http_proxy_module.html

# default `user nginx nginx;`
user nginx nginx;
worker_processes 4;


daemon on;
master_process on;


access_log off;

# debug > info > notice > warn > error > crit > alert > emerg
# debug_core debug_http debug_alloc debug_mutex debug_event debug_http debug_imap
error_log /var/log/nginx/error.log warn;
#error_log /var/log/nginx/err debug_http;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
    autoindex on;
    autoindex_exact_size on;
    autoindex_localtime on;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
                      
    error_log /var/log/nginx/error_http.log debug_http;
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;
  

  server {
    
    error_log /var/log/nginx/error_serv.log error;
    
    # priority: (=) > () > (^~) > (~, ~*) > (/)
  
    location /api/ {
        root /api/;
              
        # `if` is evil in Nginx.conf
        #   https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
        #   if ($request_method = POST) {
        #       return 405;
        #   }
        #   if ($args ~ post=140) {
        #       rewrite ^ http://localhost/ permanent;
        #   }
        error_page 404 = @fallback;
        recursive_error_pages on;
        if ($something) {
            return 404;
        }
        
        
        # http://nginx.org/en/docs/http/ngx_http_core_module.html
        #   try_files $file ... $uri;
        #   try_files $file ... =$code;
        #   `try_files` will try every URLs, even the direct file exists
        #       e.g. 
        #           /aario.html exists
        #           http://localhost/aario.html   == try_files ==> 
        #   
        
        #  It is possible to check directory’s existence by specifying a slash at the end of a name,
        #   e.g. “$uri/”. If none of the files were found, an internal redirect to the uri specified 
        #   in the last parameter is made. For example:
        #   if `$uri` and `$uri/` not found, go to `/index.php$is_args$args;`
        try_files $uri $uri/ /index.php$is_args$args;
       
       
        try_files $uri $uri/ @yii2;
       
    }
    
    
    location @fallback {
        proxy_pass http://backend;
    }
    
    location @yii2 {
        root            /yii2/
        fastcgi_pass    127.0.0.1:9000;
        fastcgi_param   SCRIPT_FILENAME  /yii2/web/index.php;
        fastcgi_param   SCRIPT_NAME     /index.php;
        fastcgi_param   QUERY_STRING    name=Aario&$args;
        include         fastcgi_params;
    }
    
    
    location /images/ {
        try_files $uri /images/default.gif;
    }
    location = /images/default.gif {
        expires 30s;
    }
    
    
    # /  alone 
    location = / {    

    }
    

  
    #proxy_pass 
    # this timeout cannot exceed 75 seconds
    proxy_connect_timeout 60s;
    
    # ! != = ~(reg-exp) ~*(non-case-sense reg-exp) !~(case-sense not match)
    # -f  | -d  | -e (is path) | -x (is executable)
    
    if($http_user_agent ~ MSIE){
    # last ([L] in Apache) | break | redirect (302) | permanent (301)
    
    # if MSIE, do rewrite in /msid/
      rewrite ^(.*)$ /msie/$1 break;
    }
    
    if($http_cookie ~* "id([^;]+)(?:;|$){
      set $id $1
    }
    
    if($request_method = DELETE){
      return 405;
    }
    
    if($slow){
      limit_rate 10k;
    }
    
    if(!-f $request_filename){
      break;
      proxy_pass http://127.0.0.1;
    }
    
    # if query string "param=100"
    if($arg ~ param=100){
      
    }
      
      
    # end with 
    location ~* \.(gif|jpg|png|jpeg)$ {
        expires 15d;
        access_log off;
        valid_referers none blocked 127.0.0.1;
        if ($invalid_referer) {
            return 404;
        }
    }
    
    
    # all 
    location / {    

    }

    # start with /about ,e.g. http://localhost/about
    # priority: low
    location /about {

    }

    # start with case-sense regular-expression string `/about/us`
    # priority: low
    location ~ /about/us {

    }

    # start with non-regular-expression string `/about/`
    # priority: high
    location ^~ /about/ {

    }



  }
}